{
  "version": 3,
  "sources": ["../../node_modules/events/events.js", "../../node_modules/matrix-widget-api/src/interfaces/WidgetApiDirection.ts", "../../node_modules/matrix-widget-api/src/interfaces/ApiVersion.ts", "../../node_modules/matrix-widget-api/src/transport/PostmessageTransport.ts", "../../node_modules/matrix-widget-api/src/interfaces/WidgetApiAction.ts", "../../node_modules/matrix-widget-api/src/interfaces/GetOpenIDAction.ts", "../../node_modules/matrix-widget-api/src/interfaces/WidgetType.ts", "../../node_modules/matrix-widget-api/src/interfaces/ModalWidgetActions.ts", "../../node_modules/matrix-widget-api/src/models/WidgetEventCapability.ts", "../../node_modules/matrix-widget-api/src/Symbols.ts", "../../node_modules/matrix-widget-api/src/WidgetApi.ts", "../../node_modules/matrix-widget-api/src/interfaces/Capabilities.ts", "../../node_modules/matrix-widget-api/src/util/SimpleObservable.ts", "../../node_modules/matrix-widget-api/src/interfaces/UpdateDelayedEventAction.ts", "../../node_modules/matrix-widget-api/src/ClientWidgetApi.ts", "../../node_modules/matrix-widget-api/src/interfaces/IWidgetApiErrorResponse.ts", "../../node_modules/matrix-widget-api/src/interfaces/WidgetKind.ts", "../../node_modules/matrix-widget-api/src/interfaces/ModalButtonKind.ts", "../../node_modules/matrix-widget-api/src/models/validation/url.ts", "../../node_modules/matrix-widget-api/src/models/validation/utils.ts", "../../node_modules/matrix-widget-api/src/models/Widget.ts", "../../node_modules/matrix-widget-api/src/models/WidgetParser.ts", "../../node_modules/matrix-widget-api/src/templating/url-template.ts", "../../node_modules/matrix-widget-api/src/driver/WidgetDriver.ts", "../../node_modules/matrix-widget-api/src/index.ts", "bldrs-inside-iframe.js"],
  "sourcesContent": ["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum WidgetApiDirection {\n    ToWidget = \"toWidget\",\n    FromWidget = \"fromWidget\",\n}\n\nexport function invertedDirection(dir: WidgetApiDirection): WidgetApiDirection {\n    if (dir === WidgetApiDirection.ToWidget) {\n        return WidgetApiDirection.FromWidget;\n    } else if (dir === WidgetApiDirection.FromWidget) {\n        return WidgetApiDirection.ToWidget;\n    } else {\n        throw new Error(\"Invalid direction\");\n    }\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum MatrixApiVersion {\n    Prerelease1 = \"0.0.1\",\n    Prerelease2 = \"0.0.2\",\n    //V010 = \"0.1.0\", // first release\n}\n\nexport enum UnstableApiVersion {\n    MSC2762 = \"org.matrix.msc2762\",\n    MSC2762_UPDATE_STATE = \"org.matrix.msc2762_update_state\",\n    MSC2871 = \"org.matrix.msc2871\",\n    MSC2873 = \"org.matrix.msc2873\",\n    MSC2931 = \"org.matrix.msc2931\",\n    MSC2974 = \"org.matrix.msc2974\",\n    MSC2876 = \"org.matrix.msc2876\",\n    MSC3819 = \"org.matrix.msc3819\",\n    MSC3846 = \"town.robin.msc3846\",\n    MSC3869 = \"org.matrix.msc3869\",\n    MSC3973 = \"org.matrix.msc3973\",\n    MSC4039 = \"org.matrix.msc4039\",\n}\n\nexport type ApiVersion = MatrixApiVersion | UnstableApiVersion | string;\n\nexport const CurrentApiVersions: ApiVersion[] = [\n    MatrixApiVersion.Prerelease1,\n    MatrixApiVersion.Prerelease2,\n    //MatrixApiVersion.V010,\n    UnstableApiVersion.MSC2762,\n    UnstableApiVersion.MSC2762_UPDATE_STATE,\n    UnstableApiVersion.MSC2871,\n    UnstableApiVersion.MSC2873,\n    UnstableApiVersion.MSC2931,\n    UnstableApiVersion.MSC2974,\n    UnstableApiVersion.MSC2876,\n    UnstableApiVersion.MSC3819,\n    UnstableApiVersion.MSC3846,\n    UnstableApiVersion.MSC3869,\n    UnstableApiVersion.MSC3973,\n    UnstableApiVersion.MSC4039,\n];\n", "/*\n * Copyright 2020 - 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from \"events\";\n\nimport { ITransport } from \"./ITransport\";\nimport {\n    invertedDirection,\n    isErrorResponse,\n    IWidgetApiRequest,\n    IWidgetApiRequestData,\n    IWidgetApiResponse,\n    IWidgetApiResponseData,\n    WidgetApiResponseError,\n    WidgetApiAction,\n    WidgetApiDirection,\n    WidgetApiToWidgetAction,\n} from \"..\";\n\ninterface IOutboundRequest {\n    request: IWidgetApiRequest;\n    resolve: (response: IWidgetApiResponse) => void;\n    reject: (err: Error) => void;\n}\n\n/**\n * Transport for the Widget API over postMessage.\n */\nexport class PostmessageTransport extends EventEmitter implements ITransport {\n    public strictOriginCheck = false;\n    public targetOrigin = \"*\";\n    public timeoutSeconds = 10;\n\n    private _ready = false;\n    private _widgetId: string | null = null;\n    private outboundRequests = new Map<string, IOutboundRequest | null>();\n    private stopController = new AbortController();\n\n    public get ready(): boolean {\n        return this._ready;\n    }\n\n    public get widgetId(): string | null {\n        return this._widgetId || null;\n    }\n\n    public constructor(\n        private sendDirection: WidgetApiDirection,\n        private initialWidgetId: string | null,\n        private transportWindow: Window,\n        private inboundWindow: Window,\n    ) {\n        super();\n        this._widgetId = initialWidgetId;\n    }\n\n    private get nextRequestId(): string {\n        const idBase = `widgetapi-${Date.now()}`;\n        let index = 0;\n        let id = idBase;\n        while (this.outboundRequests.has(id)) {\n            id = `${idBase}-${index++}`;\n        }\n\n        // reserve the ID\n        this.outboundRequests.set(id, null);\n\n        return id;\n    }\n\n    private sendInternal(message: IWidgetApiRequest | IWidgetApiResponse): void {\n        console.log(`[PostmessageTransport] Sending object to ${this.targetOrigin}: `, message);\n        this.transportWindow.postMessage(message, this.targetOrigin);\n    }\n\n    public reply<T extends IWidgetApiResponseData>(request: IWidgetApiRequest, responseData: T): void {\n        return this.sendInternal(<IWidgetApiResponse>{\n            ...request,\n            response: responseData,\n        });\n    }\n\n    public send<T extends IWidgetApiRequestData, R extends IWidgetApiResponseData>(\n        action: WidgetApiAction,\n        data: T,\n    ): Promise<R> {\n        return this.sendComplete(action, data).then((r) => <R>r.response);\n    }\n\n    public sendComplete<T extends IWidgetApiRequestData, R extends IWidgetApiResponse>(\n        action: WidgetApiAction,\n        data: T,\n    ): Promise<R> {\n        if (!this.ready || !this.widgetId) {\n            return Promise.reject(new Error(\"Not ready or unknown widget ID\"));\n        }\n        const request: IWidgetApiRequest = {\n            api: this.sendDirection,\n            widgetId: this.widgetId,\n            requestId: this.nextRequestId,\n            action: action,\n            data: data,\n        };\n        if (action === WidgetApiToWidgetAction.UpdateVisibility) {\n            request[\"visible\"] = data[\"visible\"];\n        }\n        return new Promise<R>((prResolve, prReject) => {\n            const resolve = (response: IWidgetApiResponse): void => {\n                cleanUp();\n                prResolve(<R>response);\n            };\n            const reject = (err: Error): void => {\n                cleanUp();\n                prReject(err);\n            };\n\n            const timerId = setTimeout(() => reject(new Error(\"Request timed out\")), (this.timeoutSeconds || 1) * 1000);\n\n            const onStop = (): void => reject(new Error(\"Transport stopped\"));\n            this.stopController.signal.addEventListener(\"abort\", onStop);\n\n            const cleanUp = (): void => {\n                this.outboundRequests.delete(request.requestId);\n                clearTimeout(timerId);\n                this.stopController.signal.removeEventListener(\"abort\", onStop);\n            };\n\n            this.outboundRequests.set(request.requestId, { request, resolve, reject });\n            this.sendInternal(request);\n        });\n    }\n\n    public start(): void {\n        this.inboundWindow.addEventListener(\"message\", (ev: MessageEvent) => {\n            this.handleMessage(ev);\n        });\n        this._ready = true;\n    }\n\n    public stop(): void {\n        this._ready = false;\n        this.stopController.abort();\n    }\n\n    private handleMessage(ev: MessageEvent): void {\n        if (this.stopController.signal.aborted) return;\n        if (!ev.data) return; // invalid event\n\n        if (this.strictOriginCheck && ev.origin !== window.origin) return; // bad origin\n\n        // treat the message as a response first, then downgrade to a request\n        const response = <IWidgetApiResponse>ev.data;\n        if (!response.action || !response.requestId || !response.widgetId) return; // invalid request/response\n\n        if (!response.response) {\n            // it's a request\n            const request = <IWidgetApiRequest>response;\n            if (request.api !== invertedDirection(this.sendDirection)) return; // wrong direction\n            this.handleRequest(request);\n        } else {\n            // it's a response\n            if (response.api !== this.sendDirection) return; // wrong direction\n            this.handleResponse(response);\n        }\n    }\n\n    private handleRequest(request: IWidgetApiRequest): void {\n        if (this.widgetId) {\n            if (this.widgetId !== request.widgetId) return; // wrong widget\n        } else {\n            this._widgetId = request.widgetId;\n        }\n\n        this.emit(\"message\", new CustomEvent(\"message\", { detail: request }));\n    }\n\n    private handleResponse(response: IWidgetApiResponse): void {\n        if (response.widgetId !== this.widgetId) return; // wrong widget\n\n        const req = this.outboundRequests.get(response.requestId);\n        if (!req) return; // response to an unknown request\n\n        if (isErrorResponse(response.response)) {\n            const { message, ...data } = response.response.error;\n            req.reject(new WidgetApiResponseError(message, data));\n        } else {\n            req.resolve(response);\n        }\n    }\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum WidgetApiToWidgetAction {\n    SupportedApiVersions = \"supported_api_versions\",\n    Capabilities = \"capabilities\",\n    NotifyCapabilities = \"notify_capabilities\",\n    ThemeChange = \"theme_change\",\n    LanguageChange = \"language_change\",\n    TakeScreenshot = \"screenshot\",\n    UpdateVisibility = \"visibility\",\n    OpenIDCredentials = \"openid_credentials\",\n    WidgetConfig = \"widget_config\",\n    CloseModalWidget = \"close_modal\",\n    ButtonClicked = \"button_clicked\",\n    SendEvent = \"send_event\",\n    SendToDevice = \"send_to_device\",\n    UpdateState = \"update_state\",\n    UpdateTurnServers = \"update_turn_servers\",\n}\n\nexport enum WidgetApiFromWidgetAction {\n    SupportedApiVersions = \"supported_api_versions\",\n    ContentLoaded = \"content_loaded\",\n    SendSticker = \"m.sticker\",\n    UpdateAlwaysOnScreen = \"set_always_on_screen\",\n    GetOpenIDCredentials = \"get_openid\",\n    CloseModalWidget = \"close_modal\",\n    OpenModalWidget = \"open_modal\",\n    SetModalButtonEnabled = \"set_button_enabled\",\n    SendEvent = \"send_event\",\n    SendToDevice = \"send_to_device\",\n    WatchTurnServers = \"watch_turn_servers\",\n    UnwatchTurnServers = \"unwatch_turn_servers\",\n\n    BeeperReadRoomAccountData = \"com.beeper.read_room_account_data\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC2876ReadEvents = \"org.matrix.msc2876.read_events\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC2931Navigate = \"org.matrix.msc2931.navigate\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC2974RenegotiateCapabilities = \"org.matrix.msc2974.request_capabilities\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC3869ReadRelations = \"org.matrix.msc3869.read_relations\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC3973UserDirectorySearch = \"org.matrix.msc3973.user_directory_search\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC4039GetMediaConfigAction = \"org.matrix.msc4039.get_media_config\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC4039UploadFileAction = \"org.matrix.msc4039.upload_file\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC4039DownloadFileAction = \"org.matrix.msc4039.download_file\",\n\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC4157UpdateDelayedEvent = \"org.matrix.msc4157.update_delayed_event\",\n}\n\nexport type WidgetApiAction = WidgetApiToWidgetAction | WidgetApiFromWidgetAction | string;\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IWidgetApiRequest, IWidgetApiRequestData } from \"./IWidgetApiRequest\";\nimport { WidgetApiFromWidgetAction } from \"./WidgetApiAction\";\nimport { IWidgetApiResponseData } from \"./IWidgetApiResponse\";\n\nexport enum OpenIDRequestState {\n    Allowed = \"allowed\",\n    Blocked = \"blocked\",\n    PendingUserConfirmation = \"request\",\n}\n\nexport interface IOpenIDCredentials {\n    access_token?: string; // eslint-disable-line camelcase\n    expires_in?: number; // eslint-disable-line camelcase\n    matrix_server_name?: string; // eslint-disable-line camelcase\n    token_type?: \"Bearer\" | string; // eslint-disable-line camelcase\n}\n\nexport interface IGetOpenIDActionRequestData extends IWidgetApiRequestData {\n    // nothing\n}\n\nexport interface IGetOpenIDActionRequest extends IWidgetApiRequest {\n    action: WidgetApiFromWidgetAction.GetOpenIDCredentials;\n    data: IGetOpenIDActionRequestData;\n}\n\nexport interface IGetOpenIDActionResponseData extends IWidgetApiResponseData, IOpenIDCredentials {\n    state: OpenIDRequestState;\n}\n\nexport interface IGetOpenIDActionResponse extends IGetOpenIDActionRequest {\n    response: IGetOpenIDActionResponseData;\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum MatrixWidgetType {\n    Custom = \"m.custom\",\n    JitsiMeet = \"m.jitsi\",\n    Stickerpicker = \"m.stickerpicker\",\n}\n\nexport type WidgetType = MatrixWidgetType | string;\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IWidgetApiRequest, IWidgetApiRequestData } from \"./IWidgetApiRequest\";\nimport { WidgetApiFromWidgetAction, WidgetApiToWidgetAction } from \"./WidgetApiAction\";\nimport { IWidgetApiAcknowledgeResponseData, IWidgetApiResponse } from \"./IWidgetApiResponse\";\nimport { IWidget } from \"./IWidget\";\nimport { ModalButtonKind } from \"./ModalButtonKind\";\n\nexport enum BuiltInModalButtonID {\n    Close = \"m.close\",\n}\nexport type ModalButtonID = BuiltInModalButtonID | string;\n\nexport interface IModalWidgetCreateData extends IWidgetApiRequestData {\n    [key: string]: unknown;\n}\n\nexport interface IModalWidgetReturnData {\n    [key: string]: unknown;\n}\n\n// Types for a normal modal requesting the opening a modal widget\nexport interface IModalWidgetOpenRequestDataButton {\n    id: ModalButtonID;\n    label: string;\n    kind: ModalButtonKind | string;\n    disabled?: boolean;\n}\n\nexport interface IModalWidgetOpenRequestData extends IModalWidgetCreateData, Omit<IWidget, \"id\" | \"creatorUserId\"> {\n    buttons?: IModalWidgetOpenRequestDataButton[];\n}\n\nexport interface IModalWidgetOpenRequest extends IWidgetApiRequest {\n    action: WidgetApiFromWidgetAction.OpenModalWidget;\n    data: IModalWidgetOpenRequestData;\n}\n\nexport interface IModalWidgetOpenResponse extends IWidgetApiResponse {\n    response: IWidgetApiAcknowledgeResponseData;\n}\n\n// Types for a modal widget receiving notifications that its buttons have been pressed\nexport interface IModalWidgetButtonClickedRequestData extends IWidgetApiRequestData {\n    id: IModalWidgetOpenRequestDataButton[\"id\"];\n}\n\nexport interface IModalWidgetButtonClickedRequest extends IWidgetApiRequest {\n    action: WidgetApiToWidgetAction.ButtonClicked;\n    data: IModalWidgetButtonClickedRequestData;\n}\n\nexport interface IModalWidgetButtonClickedResponse extends IWidgetApiResponse {\n    response: IWidgetApiAcknowledgeResponseData;\n}\n\n// Types for a modal widget requesting close\nexport interface IModalWidgetCloseRequest extends IWidgetApiRequest {\n    action: WidgetApiFromWidgetAction.CloseModalWidget;\n    data: IModalWidgetReturnData;\n}\n\nexport interface IModalWidgetCloseResponse extends IWidgetApiResponse {\n    response: IWidgetApiAcknowledgeResponseData;\n}\n\n// Types for a normal widget being notified that the modal widget it opened has been closed\nexport interface IModalWidgetCloseNotificationRequest extends IWidgetApiRequest {\n    action: WidgetApiToWidgetAction.CloseModalWidget;\n    data: IModalWidgetReturnData;\n}\n\nexport interface IModalWidgetCloseNotificationResponse extends IWidgetApiResponse {\n    response: IWidgetApiAcknowledgeResponseData;\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Capability } from \"..\";\n\nexport enum EventKind {\n    Event = \"event\",\n    State = \"state_event\",\n    ToDevice = \"to_device\",\n    RoomAccount = \"room_account\",\n}\n\nexport enum EventDirection {\n    Send = \"send\",\n    Receive = \"receive\",\n}\n\nexport class WidgetEventCapability {\n    private constructor(\n        public readonly direction: EventDirection,\n        public readonly eventType: string,\n        public readonly kind: EventKind,\n        public readonly keyStr: string | null,\n        public readonly raw: string,\n    ) {}\n\n    public matchesAsStateEvent(direction: EventDirection, eventType: string, stateKey: string | null): boolean {\n        if (this.kind !== EventKind.State) return false; // not a state event\n        if (this.direction !== direction) return false; // direction mismatch\n        if (this.eventType !== eventType) return false; // event type mismatch\n        if (this.keyStr === null) return true; // all state keys are allowed\n        if (this.keyStr === stateKey) return true; // this state key is allowed\n\n        // Default not allowed\n        return false;\n    }\n\n    public matchesAsToDeviceEvent(direction: EventDirection, eventType: string): boolean {\n        if (this.kind !== EventKind.ToDevice) return false; // not a to-device event\n        if (this.direction !== direction) return false; // direction mismatch\n        if (this.eventType !== eventType) return false; // event type mismatch\n\n        // Checks passed, the event is allowed\n        return true;\n    }\n\n    public matchesAsRoomEvent(direction: EventDirection, eventType: string, msgtype: string | null = null): boolean {\n        if (this.kind !== EventKind.Event) return false; // not a room event\n        if (this.direction !== direction) return false; // direction mismatch\n        if (this.eventType !== eventType) return false; // event type mismatch\n\n        if (this.eventType === \"m.room.message\") {\n            if (this.keyStr === null) return true; // all message types are allowed\n            if (this.keyStr === msgtype) return true; // this message type is allowed\n        } else {\n            return true; // already passed the check for if the event is allowed\n        }\n\n        // Default not allowed\n        return false;\n    }\n\n    public matchesAsRoomAccountData(direction: EventDirection, eventType: string): boolean {\n        if (this.kind !== EventKind.RoomAccount) return false; // not room account data\n        if (this.direction !== direction) return false; // direction mismatch\n        if (this.eventType !== eventType) return false; // event type mismatch\n\n        // Checks passed, the event is allowed\n        return true;\n    }\n\n    public static forStateEvent(\n        direction: EventDirection,\n        eventType: string,\n        stateKey?: string,\n    ): WidgetEventCapability {\n        // TODO: Enable support for m.* namespace once the MSC lands.\n        // https://github.com/matrix-org/matrix-widget-api/issues/22\n        eventType = eventType.replace(/#/g, \"\\\\#\");\n        stateKey = stateKey !== null && stateKey !== undefined ? `#${stateKey}` : \"\";\n        const str = `org.matrix.msc2762.${direction}.state_event:${eventType}${stateKey}`;\n\n        // cheat by sending it through the processor\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    public static forToDeviceEvent(direction: EventDirection, eventType: string): WidgetEventCapability {\n        // TODO: Enable support for m.* namespace once the MSC lands.\n        // https://github.com/matrix-org/matrix-widget-api/issues/56\n        const str = `org.matrix.msc3819.${direction}.to_device:${eventType}`;\n\n        // cheat by sending it through the processor\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    public static forRoomEvent(direction: EventDirection, eventType: string): WidgetEventCapability {\n        // TODO: Enable support for m.* namespace once the MSC lands.\n        // https://github.com/matrix-org/matrix-widget-api/issues/22\n        const str = `org.matrix.msc2762.${direction}.event:${eventType}`;\n\n        // cheat by sending it through the processor\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    public static forRoomMessageEvent(direction: EventDirection, msgtype?: string): WidgetEventCapability {\n        // TODO: Enable support for m.* namespace once the MSC lands.\n        // https://github.com/matrix-org/matrix-widget-api/issues/22\n        msgtype = msgtype === null || msgtype === undefined ? \"\" : msgtype;\n        const str = `org.matrix.msc2762.${direction}.event:m.room.message#${msgtype}`;\n\n        // cheat by sending it through the processor\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    public static forRoomAccountData(direction: EventDirection, eventType: string): WidgetEventCapability {\n        const str = `com.beeper.capabilities.${direction}.room_account_data:${eventType}`;\n\n        return WidgetEventCapability.findEventCapabilities([str])[0];\n    }\n\n    /**\n     * Parses a capabilities request to find all the event capability requests.\n     * @param {Iterable<Capability>} capabilities The capabilities requested/to parse.\n     * @returns {WidgetEventCapability[]} An array of event capability requests. May be empty, but never null.\n     */\n    public static findEventCapabilities(capabilities: Iterable<Capability>): WidgetEventCapability[] {\n        const parsed: WidgetEventCapability[] = [];\n        for (const cap of capabilities) {\n            let direction: EventDirection | null = null;\n            let eventSegment: string | undefined;\n            let kind: EventKind | null = null;\n\n            // TODO: Enable support for m.* namespace once the MSCs land.\n            // https://github.com/matrix-org/matrix-widget-api/issues/22\n            // https://github.com/matrix-org/matrix-widget-api/issues/56\n\n            if (cap.startsWith(\"org.matrix.msc2762.send.event:\")) {\n                direction = EventDirection.Send;\n                kind = EventKind.Event;\n                eventSegment = cap.substring(\"org.matrix.msc2762.send.event:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc2762.send.state_event:\")) {\n                direction = EventDirection.Send;\n                kind = EventKind.State;\n                eventSegment = cap.substring(\"org.matrix.msc2762.send.state_event:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc3819.send.to_device:\")) {\n                direction = EventDirection.Send;\n                kind = EventKind.ToDevice;\n                eventSegment = cap.substring(\"org.matrix.msc3819.send.to_device:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc2762.receive.event:\")) {\n                direction = EventDirection.Receive;\n                kind = EventKind.Event;\n                eventSegment = cap.substring(\"org.matrix.msc2762.receive.event:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc2762.receive.state_event:\")) {\n                direction = EventDirection.Receive;\n                kind = EventKind.State;\n                eventSegment = cap.substring(\"org.matrix.msc2762.receive.state_event:\".length);\n            } else if (cap.startsWith(\"org.matrix.msc3819.receive.to_device:\")) {\n                direction = EventDirection.Receive;\n                kind = EventKind.ToDevice;\n                eventSegment = cap.substring(\"org.matrix.msc3819.receive.to_device:\".length);\n            } else if (cap.startsWith(\"com.beeper.capabilities.receive.room_account_data:\")) {\n                direction = EventDirection.Receive;\n                kind = EventKind.RoomAccount;\n                eventSegment = cap.substring(\"com.beeper.capabilities.receive.room_account_data:\".length);\n            }\n\n            if (direction === null || kind === null || eventSegment === undefined) continue;\n\n            // The capability uses `#` as a separator between event type and state key/msgtype,\n            // so we split on that. However, a # is also valid in either one of those so we\n            // join accordingly.\n            // Eg: `m.room.message##m.text` is \"m.room.message\" event with msgtype \"#m.text\".\n            const expectingKeyStr = eventSegment.startsWith(\"m.room.message#\") || kind === EventKind.State;\n            let keyStr: string | null = null;\n            if (eventSegment.includes(\"#\") && expectingKeyStr) {\n                // Dev note: regex is difficult to write, so instead the rules are manually written\n                // out. This is probably just as understandable as a boring regex though, so win-win?\n\n                // Test cases:\n                // str                      eventSegment        keyStr\n                // -------------------------------------------------------------\n                // m.room.message#          m.room.message      <empty string>\n                // m.room.message#test      m.room.message      test\n                // m.room.message\\#         m.room.message#     test\n                // m.room.message##test     m.room.message      #test\n                // m.room.message\\##test    m.room.message#     test\n                // m.room.message\\\\##test   m.room.message\\#    test\n                // m.room.message\\\\###test  m.room.message\\#    #test\n\n                // First step: explode the string\n                const parts = eventSegment.split(\"#\");\n\n                // To form the eventSegment, we'll keep finding parts of the exploded string until\n                // there's one that doesn't end with the escape character (\\). We'll then join those\n                // segments together with the exploding character. We have to remember to consume the\n                // escape character as well.\n                const idx = parts.findIndex((p) => !p.endsWith(\"\\\\\"));\n                eventSegment = parts\n                    .slice(0, idx + 1)\n                    .map((p) => (p.endsWith(\"\\\\\") ? p.substring(0, p.length - 1) : p))\n                    .join(\"#\");\n\n                // The keyStr is whatever is left over.\n                keyStr = parts.slice(idx + 1).join(\"#\");\n            }\n\n            parsed.push(new WidgetEventCapability(direction, eventSegment, kind, keyStr, cap));\n        }\n        return parsed;\n    }\n}\n", "/*\n * Copyright 2021 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum Symbols {\n    AnyRoom = \"*\",\n}\n", "/*\n * Copyright 2020 - 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from \"events\";\n\nimport { Capability } from \"./interfaces/Capabilities\";\nimport { IWidgetApiRequest, IWidgetApiRequestEmptyData } from \"./interfaces/IWidgetApiRequest\";\nimport { IWidgetApiAcknowledgeResponseData } from \"./interfaces/IWidgetApiResponse\";\nimport { WidgetApiDirection } from \"./interfaces/WidgetApiDirection\";\nimport {\n    ISupportedVersionsActionRequest,\n    ISupportedVersionsActionResponseData,\n} from \"./interfaces/SupportedVersionsAction\";\nimport { ApiVersion, CurrentApiVersions, UnstableApiVersion } from \"./interfaces/ApiVersion\";\nimport {\n    ICapabilitiesActionRequest,\n    ICapabilitiesActionResponseData,\n    INotifyCapabilitiesActionRequest,\n    IRenegotiateCapabilitiesRequestData,\n} from \"./interfaces/CapabilitiesAction\";\nimport { ITransport } from \"./transport/ITransport\";\nimport { PostmessageTransport } from \"./transport/PostmessageTransport\";\nimport { WidgetApiFromWidgetAction, WidgetApiToWidgetAction } from \"./interfaces/WidgetApiAction\";\nimport { IWidgetApiErrorResponseData, IWidgetApiErrorResponseDataDetails } from \"./interfaces/IWidgetApiErrorResponse\";\nimport { IStickerActionRequestData } from \"./interfaces/StickerAction\";\nimport { IStickyActionRequestData, IStickyActionResponseData } from \"./interfaces/StickyAction\";\nimport {\n    IGetOpenIDActionRequestData,\n    IGetOpenIDActionResponse,\n    IOpenIDCredentials,\n    OpenIDRequestState,\n} from \"./interfaces/GetOpenIDAction\";\nimport { IOpenIDCredentialsActionRequest } from \"./interfaces/OpenIDCredentialsAction\";\nimport { MatrixWidgetType, WidgetType } from \"./interfaces/WidgetType\";\nimport {\n    BuiltInModalButtonID,\n    IModalWidgetCreateData,\n    IModalWidgetOpenRequestData,\n    IModalWidgetOpenRequestDataButton,\n    IModalWidgetReturnData,\n    ModalButtonID,\n} from \"./interfaces/ModalWidgetActions\";\nimport { ISetModalButtonEnabledActionRequestData } from \"./interfaces/SetModalButtonEnabledAction\";\nimport { ISendEventFromWidgetRequestData, ISendEventFromWidgetResponseData } from \"./interfaces/SendEventAction\";\nimport {\n    ISendToDeviceFromWidgetRequestData,\n    ISendToDeviceFromWidgetResponseData,\n} from \"./interfaces/SendToDeviceAction\";\nimport { EventDirection, WidgetEventCapability } from \"./models/WidgetEventCapability\";\nimport { INavigateActionRequestData } from \"./interfaces/NavigateAction\";\nimport { IReadEventFromWidgetRequestData, IReadEventFromWidgetResponseData } from \"./interfaces/ReadEventAction\";\nimport {\n    IReadRoomAccountDataFromWidgetRequestData,\n    IReadRoomAccountDataFromWidgetResponseData,\n} from \"./interfaces/ReadRoomAccountDataAction\";\nimport { IRoomEvent } from \"./interfaces/IRoomEvent\";\nimport { IRoomAccountData } from \"./interfaces/IRoomAccountData\";\nimport { ITurnServer, IUpdateTurnServersRequest } from \"./interfaces/TurnServerActions\";\nimport { Symbols } from \"./Symbols\";\nimport {\n    IReadRelationsFromWidgetRequestData,\n    IReadRelationsFromWidgetResponseData,\n} from \"./interfaces/ReadRelationsAction\";\nimport {\n    IUserDirectorySearchFromWidgetRequestData,\n    IUserDirectorySearchFromWidgetResponseData,\n} from \"./interfaces/UserDirectorySearchAction\";\nimport {\n    IGetMediaConfigActionFromWidgetRequestData,\n    IGetMediaConfigActionFromWidgetResponseData,\n} from \"./interfaces/GetMediaConfigAction\";\nimport {\n    IUploadFileActionFromWidgetRequestData,\n    IUploadFileActionFromWidgetResponseData,\n} from \"./interfaces/UploadFileAction\";\nimport {\n    IDownloadFileActionFromWidgetRequestData,\n    IDownloadFileActionFromWidgetResponseData,\n} from \"./interfaces/DownloadFileAction\";\nimport {\n    IUpdateDelayedEventFromWidgetRequestData,\n    IUpdateDelayedEventFromWidgetResponseData,\n    UpdateDelayedEventAction,\n} from \"./interfaces/UpdateDelayedEventAction\";\n\nexport class WidgetApiResponseError extends Error {\n    static {\n        this.prototype.name = this.name;\n    }\n\n    public constructor(\n        message: string,\n        public readonly data: IWidgetApiErrorResponseDataDetails,\n    ) {\n        super(message);\n    }\n}\n\n/**\n * API handler for widgets. This raises events for each action\n * received as `action:${action}` (eg: \"action:screenshot\").\n * Default handling can be prevented by using preventDefault()\n * on the raised event. The default handling varies for each\n * action: ones which the SDK can handle safely are acknowledged\n * appropriately and ones which are unhandled (custom or require\n * the widget to do something) are rejected with an error.\n *\n * Events which are preventDefault()ed must reply using the\n * transport. The events raised will have a detail of an\n * IWidgetApiRequest interface.\n *\n * When the WidgetApi is ready to start sending requests, it will\n * raise a \"ready\" CustomEvent. After the ready event fires, actions\n * can be sent and the transport will be ready.\n */\nexport class WidgetApi extends EventEmitter {\n    public readonly transport: ITransport;\n\n    private capabilitiesFinished = false;\n    private supportsMSC2974Renegotiate = false;\n    private requestedCapabilities: Capability[] = [];\n    private approvedCapabilities?: Capability[];\n    private cachedClientVersions?: ApiVersion[];\n    private turnServerWatchers = 0;\n\n    /**\n     * Creates a new API handler for the given widget.\n     * @param {string} widgetId The widget ID to listen for. If not supplied then\n     * the API will use the widget ID from the first valid request it receives.\n     * @param {string} clientOrigin The origin of the client, or null if not known.\n     */\n    public constructor(\n        widgetId: string | null = null,\n        private clientOrigin: string | null = null,\n    ) {\n        super();\n        if (!window.parent) {\n            throw new Error(\"No parent window. This widget doesn't appear to be embedded properly.\");\n        }\n        this.transport = new PostmessageTransport(WidgetApiDirection.FromWidget, widgetId, window.parent, window);\n        this.transport.targetOrigin = clientOrigin;\n        this.transport.on(\"message\", this.handleMessage.bind(this));\n    }\n\n    /**\n     * Determines if the widget was granted a particular capability. Note that on\n     * clients where the capabilities are not fed back to the widget this function\n     * will rely on requested capabilities instead.\n     * @param {Capability} capability The capability to check for approval of.\n     * @returns {boolean} True if the widget has approval for the given capability.\n     */\n    public hasCapability(capability: Capability): boolean {\n        if (Array.isArray(this.approvedCapabilities)) {\n            return this.approvedCapabilities.includes(capability);\n        }\n        return this.requestedCapabilities.includes(capability);\n    }\n\n    /**\n     * Request a capability from the client. It is not guaranteed to be allowed,\n     * but will be asked for.\n     * @param {Capability} capability The capability to request.\n     * @throws Throws if the capabilities negotiation has already started and the\n     * widget is unable to request additional capabilities.\n     */\n    public requestCapability(capability: Capability): void {\n        if (this.capabilitiesFinished && !this.supportsMSC2974Renegotiate) {\n            throw new Error(\"Capabilities have already been negotiated\");\n        }\n\n        this.requestedCapabilities.push(capability);\n    }\n\n    /**\n     * Request capabilities from the client. They are not guaranteed to be allowed,\n     * but will be asked for if the negotiation has not already happened.\n     * @param {Capability[]} capabilities The capabilities to request.\n     * @throws Throws if the capabilities negotiation has already started.\n     */\n    public requestCapabilities(capabilities: Capability[]): void {\n        capabilities.forEach((cap) => this.requestCapability(cap));\n    }\n\n    /**\n     * Requests the capability to interact with rooms other than the user's currently\n     * viewed room. Applies to event receiving and sending.\n     * @param {string | Symbols.AnyRoom} roomId The room ID, or `Symbols.AnyRoom` to\n     * denote all known rooms.\n     */\n    public requestCapabilityForRoomTimeline(roomId: string | Symbols.AnyRoom): void {\n        this.requestCapability(`org.matrix.msc2762.timeline:${roomId}`);\n    }\n\n    /**\n     * Requests the capability to send a given state event with optional explicit\n     * state key. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     * @param {string} stateKey If specified, the specific state key to request.\n     * Otherwise all state keys will be requested.\n     */\n    public requestCapabilityToSendState(eventType: string, stateKey?: string): void {\n        this.requestCapability(WidgetEventCapability.forStateEvent(EventDirection.Send, eventType, stateKey).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given state event with optional explicit\n     * state key. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     * @param {string} stateKey If specified, the specific state key to request.\n     * Otherwise all state keys will be requested.\n     */\n    public requestCapabilityToReceiveState(eventType: string, stateKey?: string): void {\n        this.requestCapability(WidgetEventCapability.forStateEvent(EventDirection.Receive, eventType, stateKey).raw);\n    }\n\n    /**\n     * Requests the capability to send a given to-device event. It is not\n     * guaranteed to be allowed, but will be asked for if the negotiation has\n     * not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToSendToDevice(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forToDeviceEvent(EventDirection.Send, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given to-device event. It is not\n     * guaranteed to be allowed, but will be asked for if the negotiation has\n     * not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToReceiveToDevice(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forToDeviceEvent(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to send a given room event. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToSendEvent(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomEvent(EventDirection.Send, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given room event. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The room event type to ask for.\n     */\n    public requestCapabilityToReceiveEvent(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomEvent(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests the capability to send a given message event with optional explicit\n     * `msgtype`. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} msgtype If specified, the specific msgtype to request.\n     * Otherwise all message types will be requested.\n     */\n    public requestCapabilityToSendMessage(msgtype?: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomMessageEvent(EventDirection.Send, msgtype).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given message event with optional explicit\n     * `msgtype`. It is not guaranteed to be allowed, but will be asked for if the\n     * negotiation has not already happened.\n     * @param {string} msgtype If specified, the specific msgtype to request.\n     * Otherwise all message types will be requested.\n     */\n    public requestCapabilityToReceiveMessage(msgtype?: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomMessageEvent(EventDirection.Receive, msgtype).raw);\n    }\n\n    /**\n     * Requests the capability to receive a given item in room account data. It is not guaranteed to be\n     * allowed, but will be asked for if the negotiation has not already happened.\n     * @param {string} eventType The state event type to ask for.\n     */\n    public requestCapabilityToReceiveRoomAccountData(eventType: string): void {\n        this.requestCapability(WidgetEventCapability.forRoomAccountData(EventDirection.Receive, eventType).raw);\n    }\n\n    /**\n     * Requests an OpenID Connect token from the client for the currently logged in\n     * user. This token can be validated server-side with the federation API. Note\n     * that the widget is responsible for validating the token and caching any results\n     * it needs.\n     * @returns {Promise<IOpenIDCredentials>} Resolves to a token for verification.\n     * @throws Throws if the user rejected the request or the request failed.\n     */\n    public requestOpenIDConnectToken(): Promise<IOpenIDCredentials> {\n        return new Promise<IOpenIDCredentials>((resolve, reject) => {\n            this.transport\n                .sendComplete<IGetOpenIDActionRequestData, IGetOpenIDActionResponse>(\n                    WidgetApiFromWidgetAction.GetOpenIDCredentials,\n                    {},\n                )\n                .then((response) => {\n                    const rdata = response.response;\n                    if (rdata.state === OpenIDRequestState.Allowed) {\n                        resolve(rdata);\n                    } else if (rdata.state === OpenIDRequestState.Blocked) {\n                        reject(new Error(\"User declined to verify their identity\"));\n                    } else if (rdata.state === OpenIDRequestState.PendingUserConfirmation) {\n                        const handlerFn = (ev: CustomEvent<IOpenIDCredentialsActionRequest>): void => {\n                            ev.preventDefault();\n                            const request = ev.detail;\n                            if (request.data.original_request_id !== response.requestId) return;\n                            if (request.data.state === OpenIDRequestState.Allowed) {\n                                resolve(request.data);\n                                this.transport.reply(request, <IWidgetApiRequestEmptyData>{}); // ack\n                            } else if (request.data.state === OpenIDRequestState.Blocked) {\n                                reject(new Error(\"User declined to verify their identity\"));\n                                this.transport.reply(request, <IWidgetApiRequestEmptyData>{}); // ack\n                            } else {\n                                reject(new Error(\"Invalid state on reply: \" + rdata.state));\n                                this.transport.reply(request, <IWidgetApiErrorResponseData>{\n                                    error: {\n                                        message: \"Invalid state\",\n                                    },\n                                });\n                            }\n                            this.off(`action:${WidgetApiToWidgetAction.OpenIDCredentials}`, handlerFn);\n                        };\n                        this.on(`action:${WidgetApiToWidgetAction.OpenIDCredentials}`, handlerFn);\n                    } else {\n                        reject(new Error(\"Invalid state: \" + rdata.state));\n                    }\n                })\n                .catch(reject);\n        });\n    }\n\n    /**\n     * Asks the client for additional capabilities. Capabilities can be queued for this\n     * request with the requestCapability() functions.\n     * @returns {Promise<void>} Resolves when complete. Note that the promise resolves when\n     * the capabilities request has gone through, not when the capabilities are approved/denied.\n     * Use the WidgetApiToWidgetAction.NotifyCapabilities action to detect changes.\n     */\n    public updateRequestedCapabilities(): Promise<void> {\n        return this.transport\n            .send(WidgetApiFromWidgetAction.MSC2974RenegotiateCapabilities, <IRenegotiateCapabilitiesRequestData>{\n                capabilities: this.requestedCapabilities,\n            })\n            .then();\n    }\n\n    /**\n     * Tell the client that the content has been loaded.\n     * @returns {Promise} Resolves when the client acknowledges the request.\n     */\n    public sendContentLoaded(): Promise<void> {\n        return this.transport.send(WidgetApiFromWidgetAction.ContentLoaded, <IWidgetApiRequestEmptyData>{}).then();\n    }\n\n    /**\n     * Sends a sticker to the client.\n     * @param {IStickerActionRequestData} sticker The sticker to send.\n     * @returns {Promise} Resolves when the client acknowledges the request.\n     */\n    public sendSticker(sticker: IStickerActionRequestData): Promise<void> {\n        return this.transport.send(WidgetApiFromWidgetAction.SendSticker, sticker).then();\n    }\n\n    /**\n     * Asks the client to set the always-on-screen status for this widget.\n     * @param {boolean} value The new state to request.\n     * @returns {Promise<boolean>} Resolve with true if the client was able to fulfill\n     * the request, resolves to false otherwise. Rejects if an error occurred.\n     */\n    public setAlwaysOnScreen(value: boolean): Promise<boolean> {\n        return this.transport\n            .send<\n                IStickyActionRequestData,\n                IStickyActionResponseData\n            >(WidgetApiFromWidgetAction.UpdateAlwaysOnScreen, { value })\n            .then((res) => res.success);\n    }\n\n    /**\n     * Opens a modal widget.\n     * @param {string} url The URL to the modal widget.\n     * @param {string} name The name of the widget.\n     * @param {IModalWidgetOpenRequestDataButton[]} buttons The buttons to have on the widget.\n     * @param {IModalWidgetCreateData} data Data to supply to the modal widget.\n     * @param {WidgetType} type The type of modal widget.\n     * @returns {Promise<void>} Resolves when the modal widget has been opened.\n     */\n    public openModalWidget(\n        url: string,\n        name: string,\n        buttons: IModalWidgetOpenRequestDataButton[] = [],\n        data: IModalWidgetCreateData = {},\n        type: WidgetType = MatrixWidgetType.Custom,\n    ): Promise<void> {\n        return this.transport\n            .send<IModalWidgetOpenRequestData>(WidgetApiFromWidgetAction.OpenModalWidget, {\n                type,\n                url,\n                name,\n                buttons,\n                data,\n            })\n            .then();\n    }\n\n    /**\n     * Closes the modal widget. The widget's session will be terminated shortly after.\n     * @param {IModalWidgetReturnData} data Optional data to close the modal widget with.\n     * @returns {Promise<void>} Resolves when complete.\n     */\n    public closeModalWidget(data: IModalWidgetReturnData = {}): Promise<void> {\n        return this.transport.send<IModalWidgetReturnData>(WidgetApiFromWidgetAction.CloseModalWidget, data).then();\n    }\n\n    public sendRoomEvent(\n        eventType: string,\n        content: unknown,\n        roomId?: string,\n        delay?: number,\n        parentDelayId?: string,\n    ): Promise<ISendEventFromWidgetResponseData> {\n        return this.sendEvent(eventType, undefined, content, roomId, delay, parentDelayId);\n    }\n\n    public sendStateEvent(\n        eventType: string,\n        stateKey: string,\n        content: unknown,\n        roomId?: string,\n        delay?: number,\n        parentDelayId?: string,\n    ): Promise<ISendEventFromWidgetResponseData> {\n        return this.sendEvent(eventType, stateKey, content, roomId, delay, parentDelayId);\n    }\n\n    private sendEvent(\n        eventType: string,\n        stateKey: string | undefined,\n        content: unknown,\n        roomId?: string,\n        delay?: number,\n        parentDelayId?: string,\n    ): Promise<ISendEventFromWidgetResponseData> {\n        return this.transport.send<ISendEventFromWidgetRequestData, ISendEventFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.SendEvent,\n            {\n                type: eventType,\n                content,\n                ...(stateKey !== undefined && { state_key: stateKey }),\n                ...(roomId !== undefined && { room_id: roomId }),\n                ...(delay !== undefined && { delay }),\n                ...(parentDelayId !== undefined && { parent_delay_id: parentDelayId }),\n            },\n        );\n    }\n\n    /**\n     * @deprecated This currently relies on an unstable MSC (MSC4157).\n     */\n    public updateDelayedEvent(\n        delayId: string,\n        action: UpdateDelayedEventAction,\n    ): Promise<IUpdateDelayedEventFromWidgetResponseData> {\n        return this.transport.send<IUpdateDelayedEventFromWidgetRequestData, IUpdateDelayedEventFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC4157UpdateDelayedEvent,\n            {\n                delay_id: delayId,\n                action,\n            },\n        );\n    }\n\n    /**\n     * Sends a to-device event.\n     * @param {string} eventType The type of events being sent.\n     * @param {boolean} encrypted Whether to encrypt the message contents.\n     * @param {Object} contentMap A map from user IDs to device IDs to message contents.\n     * @returns {Promise<ISendToDeviceFromWidgetResponseData>} Resolves when complete.\n     */\n    public sendToDevice(\n        eventType: string,\n        encrypted: boolean,\n        contentMap: { [userId: string]: { [deviceId: string]: object } },\n    ): Promise<ISendToDeviceFromWidgetResponseData> {\n        return this.transport.send<ISendToDeviceFromWidgetRequestData, ISendToDeviceFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.SendToDevice,\n            { type: eventType, encrypted, messages: contentMap },\n        );\n    }\n\n    public readRoomAccountData(eventType: string, roomIds?: (string | Symbols.AnyRoom)[]): Promise<IRoomAccountData[]> {\n        const data: IReadEventFromWidgetRequestData = { type: eventType };\n\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        return this.transport\n            .send<\n                IReadRoomAccountDataFromWidgetRequestData,\n                IReadRoomAccountDataFromWidgetResponseData\n            >(WidgetApiFromWidgetAction.BeeperReadRoomAccountData, data)\n            .then((r) => r.events);\n    }\n\n    public readRoomEvents(\n        eventType: string,\n        limit?: number,\n        msgtype?: string,\n        roomIds?: (string | Symbols.AnyRoom)[],\n        since?: string | undefined,\n    ): Promise<IRoomEvent[]> {\n        const data: IReadEventFromWidgetRequestData = { type: eventType, msgtype: msgtype };\n        if (limit !== undefined) {\n            data.limit = limit;\n        }\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        if (since) {\n            data.since = since;\n        }\n        return this.transport\n            .send<\n                IReadEventFromWidgetRequestData,\n                IReadEventFromWidgetResponseData\n            >(WidgetApiFromWidgetAction.MSC2876ReadEvents, data)\n            .then((r) => r.events);\n    }\n\n    /**\n     * Reads all related events given a known eventId.\n     * @param eventId The id of the parent event to be read.\n     * @param roomId The room to look within. When undefined, the user's currently\n     * viewed room.\n     * @param relationType The relationship type of child events to search for.\n     * When undefined, all relations are returned.\n     * @param eventType The event type of child events to search for. When undefined,\n     * all related events are returned.\n     * @param limit The maximum number of events to retrieve per room. If not\n     * supplied, the server will apply a default limit.\n     * @param from The pagination token to start returning results from, as\n     * received from a previous call. If not supplied, results start at the most\n     * recent topological event known to the server.\n     * @param to The pagination token to stop returning results at. If not\n     * supplied, results continue up to limit or until there are no more events.\n     * @param direction The direction to search for according to MSC3715.\n     * @returns Resolves to the room relations.\n     */\n    public async readEventRelations(\n        eventId: string,\n        roomId?: string,\n        relationType?: string,\n        eventType?: string,\n        limit?: number,\n        from?: string,\n        to?: string,\n        direction?: \"f\" | \"b\",\n    ): Promise<IReadRelationsFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC3869)) {\n            throw new Error(\"The read_relations action is not supported by the client.\");\n        }\n\n        const data: IReadRelationsFromWidgetRequestData = {\n            event_id: eventId,\n            rel_type: relationType,\n            event_type: eventType,\n            room_id: roomId,\n            to,\n            from,\n            limit,\n            direction,\n        };\n\n        return this.transport.send<IReadRelationsFromWidgetRequestData, IReadRelationsFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC3869ReadRelations,\n            data,\n        );\n    }\n\n    public readStateEvents(\n        eventType: string,\n        limit?: number,\n        stateKey?: string,\n        roomIds?: (string | Symbols.AnyRoom)[],\n    ): Promise<IRoomEvent[]> {\n        const data: IReadEventFromWidgetRequestData = {\n            type: eventType,\n            state_key: stateKey === undefined ? true : stateKey,\n        };\n        if (limit !== undefined) {\n            data.limit = limit;\n        }\n        if (roomIds) {\n            if (roomIds.includes(Symbols.AnyRoom)) {\n                data.room_ids = Symbols.AnyRoom;\n            } else {\n                data.room_ids = roomIds;\n            }\n        }\n        return this.transport\n            .send<\n                IReadEventFromWidgetRequestData,\n                IReadEventFromWidgetResponseData\n            >(WidgetApiFromWidgetAction.MSC2876ReadEvents, data)\n            .then((r) => r.events);\n    }\n\n    /**\n     * Sets a button as disabled or enabled on the modal widget. Buttons are enabled by default.\n     * @param {ModalButtonID} buttonId The button ID to enable/disable.\n     * @param {boolean} isEnabled Whether or not the button is enabled.\n     * @returns {Promise<void>} Resolves when complete.\n     * @throws Throws if the button cannot be disabled, or the client refuses to disable the button.\n     */\n    public setModalButtonEnabled(buttonId: ModalButtonID, isEnabled: boolean): Promise<void> {\n        if (buttonId === BuiltInModalButtonID.Close) {\n            throw new Error(\"The close button cannot be disabled\");\n        }\n        return this.transport\n            .send<ISetModalButtonEnabledActionRequestData>(WidgetApiFromWidgetAction.SetModalButtonEnabled, {\n                button: buttonId,\n                enabled: isEnabled,\n            })\n            .then();\n    }\n\n    /**\n     * Attempts to navigate the client to the given URI. This can only be called with Matrix URIs\n     * (currently only matrix.to, but in future a Matrix URI scheme will be defined).\n     * @param {string} uri The URI to navigate to.\n     * @returns {Promise<void>} Resolves when complete.\n     * @throws Throws if the URI is invalid or cannot be processed.\n     * @deprecated This currently relies on an unstable MSC (MSC2931).\n     */\n    public navigateTo(uri: string): Promise<void> {\n        if (!uri || !uri.startsWith(\"https://matrix.to/#\")) {\n            throw new Error(\"Invalid matrix.to URI\");\n        }\n\n        return this.transport\n            .send<INavigateActionRequestData>(WidgetApiFromWidgetAction.MSC2931Navigate, { uri })\n            .then();\n    }\n\n    /**\n     * Starts watching for TURN servers, yielding an initial set of credentials as soon as possible,\n     * and thereafter yielding new credentials whenever the previous ones expire.\n     * @yields {ITurnServer} The TURN server URIs and credentials currently available to the widget.\n     */\n    public async *getTurnServers(): AsyncGenerator<ITurnServer> {\n        let setTurnServer: (server: ITurnServer) => void;\n\n        const onUpdateTurnServers = async (ev: CustomEvent<IUpdateTurnServersRequest>): Promise<void> => {\n            ev.preventDefault();\n            setTurnServer(ev.detail.data);\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(ev.detail, {});\n        };\n\n        // Start listening for updates before we even start watching, to catch\n        // TURN data that is sent immediately\n        this.on(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n\n        // Only send the 'watch' action if we aren't already watching\n        if (this.turnServerWatchers === 0) {\n            try {\n                await this.transport.send<IWidgetApiRequestEmptyData>(WidgetApiFromWidgetAction.WatchTurnServers, {});\n            } catch (e) {\n                this.off(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n                throw e;\n            }\n        }\n        this.turnServerWatchers++;\n\n        try {\n            // Watch for new data indefinitely (until this generator's return method is called)\n            while (true) {\n                yield await new Promise<ITurnServer>((resolve) => (setTurnServer = resolve));\n            }\n        } finally {\n            // The loop was broken by the caller - clean up\n            this.off(`action:${WidgetApiToWidgetAction.UpdateTurnServers}`, onUpdateTurnServers);\n\n            // Since sending the 'unwatch' action will end updates for all other\n            // consumers, only send it if we're the only consumer remaining\n            this.turnServerWatchers--;\n            if (this.turnServerWatchers === 0) {\n                await this.transport.send<IWidgetApiRequestEmptyData>(WidgetApiFromWidgetAction.UnwatchTurnServers, {});\n            }\n        }\n    }\n\n    /**\n     * Search for users in the user directory.\n     * @param searchTerm The term to search for.\n     * @param limit The maximum number of results to return. If not supplied, the\n     * @returns Resolves to the search results.\n     */\n    public async searchUserDirectory(\n        searchTerm: string,\n        limit?: number,\n    ): Promise<IUserDirectorySearchFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC3973)) {\n            throw new Error(\"The user_directory_search action is not supported by the client.\");\n        }\n\n        const data: IUserDirectorySearchFromWidgetRequestData = {\n            search_term: searchTerm,\n            limit,\n        };\n\n        return this.transport.send<\n            IUserDirectorySearchFromWidgetRequestData,\n            IUserDirectorySearchFromWidgetResponseData\n        >(WidgetApiFromWidgetAction.MSC3973UserDirectorySearch, data);\n    }\n\n    /**\n     * Get the config for the media repository.\n     * @returns Promise which resolves with an object containing the config.\n     */\n    public async getMediaConfig(): Promise<IGetMediaConfigActionFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC4039)) {\n            throw new Error(\"The get_media_config action is not supported by the client.\");\n        }\n\n        const data: IGetMediaConfigActionFromWidgetRequestData = {};\n\n        return this.transport.send<\n            IGetMediaConfigActionFromWidgetRequestData,\n            IGetMediaConfigActionFromWidgetResponseData\n        >(WidgetApiFromWidgetAction.MSC4039GetMediaConfigAction, data);\n    }\n\n    /**\n     * Upload a file to the media repository on the homeserver.\n     * @param file - The object to upload. Something that can be sent to\n     *               XMLHttpRequest.send (typically a File).\n     * @returns Resolves to the location of the uploaded file.\n     */\n    public async uploadFile(file: XMLHttpRequestBodyInit): Promise<IUploadFileActionFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC4039)) {\n            throw new Error(\"The upload_file action is not supported by the client.\");\n        }\n\n        const data: IUploadFileActionFromWidgetRequestData = {\n            file,\n        };\n\n        return this.transport.send<IUploadFileActionFromWidgetRequestData, IUploadFileActionFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC4039UploadFileAction,\n            data,\n        );\n    }\n\n    /**\n     * Download a file from the media repository on the homeserver.\n     * @param contentUri - MXC URI of the file to download.\n     * @returns Resolves to the contents of the file.\n     */\n    public async downloadFile(contentUri: string): Promise<IDownloadFileActionFromWidgetResponseData> {\n        const versions = await this.getClientVersions();\n        if (!versions.includes(UnstableApiVersion.MSC4039)) {\n            throw new Error(\"The download_file action is not supported by the client.\");\n        }\n\n        const data: IDownloadFileActionFromWidgetRequestData = {\n            content_uri: contentUri,\n        };\n\n        return this.transport.send<IDownloadFileActionFromWidgetRequestData, IDownloadFileActionFromWidgetResponseData>(\n            WidgetApiFromWidgetAction.MSC4039DownloadFileAction,\n            data,\n        );\n    }\n\n    /**\n     * Starts the communication channel. This should be done early to ensure\n     * that messages are not missed. Communication can only be stopped by the client.\n     */\n    public start(): void {\n        this.transport.start();\n        this.getClientVersions().then((v) => {\n            if (v.includes(UnstableApiVersion.MSC2974)) {\n                this.supportsMSC2974Renegotiate = true;\n            }\n        });\n    }\n\n    private handleMessage(ev: CustomEvent<IWidgetApiRequest>): void | Promise<void> {\n        const actionEv = new CustomEvent(`action:${ev.detail.action}`, {\n            detail: ev.detail,\n            cancelable: true,\n        });\n        this.emit(`action:${ev.detail.action}`, actionEv);\n        if (!actionEv.defaultPrevented) {\n            switch (ev.detail.action) {\n                case WidgetApiToWidgetAction.SupportedApiVersions:\n                    return this.replyVersions(<ISupportedVersionsActionRequest>ev.detail);\n                case WidgetApiToWidgetAction.Capabilities:\n                    return this.handleCapabilities(<ICapabilitiesActionRequest>ev.detail);\n                case WidgetApiToWidgetAction.UpdateVisibility:\n                    return this.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{}); // ack to avoid error spam\n                case WidgetApiToWidgetAction.NotifyCapabilities:\n                    return this.transport.reply(ev.detail, <IWidgetApiRequestEmptyData>{}); // ack to avoid error spam\n                default:\n                    return this.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\n                        error: {\n                            message: \"Unknown or unsupported action: \" + ev.detail.action,\n                        },\n                    });\n            }\n        }\n    }\n\n    private replyVersions(request: ISupportedVersionsActionRequest): void {\n        this.transport.reply<ISupportedVersionsActionResponseData>(request, {\n            supported_versions: CurrentApiVersions,\n        });\n    }\n\n    public getClientVersions(): Promise<ApiVersion[]> {\n        if (Array.isArray(this.cachedClientVersions)) {\n            return Promise.resolve(this.cachedClientVersions);\n        }\n\n        return this.transport\n            .send<IWidgetApiRequestEmptyData, ISupportedVersionsActionResponseData>(\n                WidgetApiFromWidgetAction.SupportedApiVersions,\n                {},\n            )\n            .then((r) => {\n                this.cachedClientVersions = r.supported_versions;\n                return r.supported_versions;\n            })\n            .catch((e) => {\n                console.warn(\"non-fatal error getting supported client versions: \", e);\n                return [];\n            });\n    }\n\n    private handleCapabilities(request: ICapabilitiesActionRequest): void | Promise<void> {\n        if (this.capabilitiesFinished) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: {\n                    message: \"Capability negotiation already completed\",\n                },\n            });\n        }\n\n        // See if we can expect a capabilities notification or not\n        return this.getClientVersions().then((v) => {\n            if (v.includes(UnstableApiVersion.MSC2871)) {\n                this.once(\n                    `action:${WidgetApiToWidgetAction.NotifyCapabilities}`,\n                    (ev: CustomEvent<INotifyCapabilitiesActionRequest>) => {\n                        this.approvedCapabilities = ev.detail.data.approved;\n                        this.emit(\"ready\");\n                    },\n                );\n            } else {\n                // if we can't expect notification, we're as done as we can be\n                this.emit(\"ready\");\n            }\n\n            // in either case, reply to that capabilities request\n            this.capabilitiesFinished = true;\n            return this.transport.reply<ICapabilitiesActionResponseData>(request, {\n                capabilities: this.requestedCapabilities,\n            });\n        });\n    }\n}\n", "/*\n * Copyright 2020 - 2021 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Symbols } from \"../Symbols\";\n\nexport enum MatrixCapabilities {\n    Screenshots = \"m.capability.screenshot\",\n    StickerSending = \"m.sticker\",\n    AlwaysOnScreen = \"m.always_on_screen\",\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     * Ask Element to not give the option to move the widget into a separate tab.\n     */\n    RequiresClient = \"io.element.requires_client\",\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC2931Navigate = \"org.matrix.msc2931.navigate\",\n    MSC3846TurnServers = \"town.robin.msc3846.turn_servers\",\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC3973UserDirectorySearch = \"org.matrix.msc3973.user_directory_search\",\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC4039UploadFile = \"org.matrix.msc4039.upload_file\",\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC4039DownloadFile = \"org.matrix.msc4039.download_file\",\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC4157SendDelayedEvent = \"org.matrix.msc4157.send.delayed_event\",\n    /**\n     * @deprecated It is not recommended to rely on this existing - it can be removed without notice.\n     */\n    MSC4157UpdateDelayedEvent = \"org.matrix.msc4157.update_delayed_event\",\n}\n\nexport type Capability = MatrixCapabilities | string;\n\nexport const StickerpickerCapabilities: Capability[] = [MatrixCapabilities.StickerSending];\nexport const VideoConferenceCapabilities: Capability[] = [MatrixCapabilities.AlwaysOnScreen];\n\n/**\n * Determines if a capability is a capability for a timeline.\n * @param {Capability} capability The capability to test.\n * @returns {boolean} True if a timeline capability, false otherwise.\n */\nexport function isTimelineCapability(capability: Capability): boolean {\n    // TODO: Change when MSC2762 becomes stable.\n    return capability?.startsWith(\"org.matrix.msc2762.timeline:\");\n}\n\n/**\n * Determines if a capability is a timeline capability for the given room.\n * @param {Capability} capability The capability to test.\n * @param {string | Symbols.AnyRoom} roomId The room ID, or `Symbols.AnyRoom` for that designation.\n * @returns {boolean} True if a matching capability, false otherwise.\n */\nexport function isTimelineCapabilityFor(capability: Capability, roomId: string | Symbols.AnyRoom): boolean {\n    return capability === `org.matrix.msc2762.timeline:${roomId}`;\n}\n\n/**\n * Gets the room ID described by a timeline capability.\n * @param {string} capability The capability to parse.\n * @returns {string} The room ID.\n */\nexport function getTimelineRoomIDFromCapability(capability: Capability): string {\n    return capability.substring(capability.indexOf(\":\") + 1);\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type ObservableFunction<T> = (val: T) => void;\n\nexport class SimpleObservable<T> {\n    private listeners: ObservableFunction<T>[] = [];\n\n    public constructor(initialFn?: ObservableFunction<T>) {\n        if (initialFn) this.listeners.push(initialFn);\n    }\n\n    public onUpdate(fn: ObservableFunction<T>): void {\n        this.listeners.push(fn);\n    }\n\n    public update(val: T): void {\n        for (const listener of this.listeners) {\n            listener(val);\n        }\n    }\n\n    public close(): void {\n        this.listeners = []; // reset\n    }\n}\n", "/*\n * Copyright 2020 - 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IWidgetApiRequest, IWidgetApiRequestData } from \"./IWidgetApiRequest\";\nimport { WidgetApiFromWidgetAction } from \"./WidgetApiAction\";\nimport { IWidgetApiResponseData } from \"./IWidgetApiResponse\";\n\nexport enum UpdateDelayedEventAction {\n    Cancel = \"cancel\",\n    Restart = \"restart\",\n    Send = \"send\",\n}\n\nexport interface IUpdateDelayedEventFromWidgetRequestData extends IWidgetApiRequestData {\n    delay_id: string; // eslint-disable-line camelcase\n    action: UpdateDelayedEventAction;\n}\n\nexport interface IUpdateDelayedEventFromWidgetActionRequest extends IWidgetApiRequest {\n    action: WidgetApiFromWidgetAction.MSC4157UpdateDelayedEvent;\n    data: IUpdateDelayedEventFromWidgetRequestData;\n}\n\nexport interface IUpdateDelayedEventFromWidgetResponseData extends IWidgetApiResponseData {\n    // nothing\n}\n\nexport interface IUpdateDelayedEventFromWidgetActionResponse extends IUpdateDelayedEventFromWidgetActionRequest {\n    response: IUpdateDelayedEventFromWidgetResponseData;\n}\n", "/*\n * Copyright 2020 - 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from \"events\";\n\nimport { ITransport } from \"./transport/ITransport\";\nimport { Widget } from \"./models/Widget\";\nimport { PostmessageTransport } from \"./transport/PostmessageTransport\";\nimport { WidgetApiDirection } from \"./interfaces/WidgetApiDirection\";\nimport { IWidgetApiRequest, IWidgetApiRequestEmptyData } from \"./interfaces/IWidgetApiRequest\";\nimport { IContentLoadedActionRequest } from \"./interfaces/ContentLoadedAction\";\nimport { WidgetApiFromWidgetAction, WidgetApiToWidgetAction } from \"./interfaces/WidgetApiAction\";\nimport { IWidgetApiErrorResponseData } from \"./interfaces/IWidgetApiErrorResponse\";\nimport {\n    Capability,\n    MatrixCapabilities,\n    getTimelineRoomIDFromCapability,\n    isTimelineCapability,\n} from \"./interfaces/Capabilities\";\nimport { IOpenIDUpdate, ISendEventDetails, ISendDelayedEventDetails, WidgetDriver } from \"./driver/WidgetDriver\";\nimport {\n    ICapabilitiesActionResponseData,\n    INotifyCapabilitiesActionRequestData,\n    IRenegotiateCapabilitiesActionRequest,\n} from \"./interfaces/CapabilitiesAction\";\nimport {\n    ISupportedVersionsActionRequest,\n    ISupportedVersionsActionResponseData,\n} from \"./interfaces/SupportedVersionsAction\";\nimport { ApiVersion, CurrentApiVersions, UnstableApiVersion } from \"./interfaces/ApiVersion\";\nimport { IScreenshotActionResponseData } from \"./interfaces/ScreenshotAction\";\nimport { IVisibilityActionRequestData } from \"./interfaces/VisibilityAction\";\nimport { IWidgetApiAcknowledgeResponseData, IWidgetApiResponseData } from \"./interfaces/IWidgetApiResponse\";\nimport {\n    IModalWidgetButtonClickedRequestData,\n    IModalWidgetOpenRequestData,\n    IModalWidgetOpenRequestDataButton,\n    IModalWidgetReturnData,\n} from \"./interfaces/ModalWidgetActions\";\nimport {\n    ISendEventFromWidgetActionRequest,\n    ISendEventFromWidgetResponseData,\n    ISendEventToWidgetRequestData,\n} from \"./interfaces/SendEventAction\";\nimport {\n    ISendToDeviceFromWidgetActionRequest,\n    ISendToDeviceFromWidgetResponseData,\n    ISendToDeviceToWidgetRequestData,\n} from \"./interfaces/SendToDeviceAction\";\nimport { EventDirection, EventKind, WidgetEventCapability } from \"./models/WidgetEventCapability\";\nimport { IRoomEvent } from \"./interfaces/IRoomEvent\";\nimport { IRoomAccountData } from \"./interfaces/IRoomAccountData\";\nimport {\n    IGetOpenIDActionRequest,\n    IGetOpenIDActionResponseData,\n    IOpenIDCredentials,\n    OpenIDRequestState,\n} from \"./interfaces/GetOpenIDAction\";\nimport { SimpleObservable } from \"./util/SimpleObservable\";\nimport { IOpenIDCredentialsActionRequestData } from \"./interfaces/OpenIDCredentialsAction\";\nimport { INavigateActionRequest } from \"./interfaces/NavigateAction\";\nimport { IReadEventFromWidgetActionRequest, IReadEventFromWidgetResponseData } from \"./interfaces/ReadEventAction\";\nimport {\n    ITurnServer,\n    IWatchTurnServersRequest,\n    IUnwatchTurnServersRequest,\n    IUpdateTurnServersRequestData,\n} from \"./interfaces/TurnServerActions\";\nimport { Symbols } from \"./Symbols\";\nimport {\n    IReadRelationsFromWidgetActionRequest,\n    IReadRelationsFromWidgetResponseData,\n} from \"./interfaces/ReadRelationsAction\";\nimport {\n    IUserDirectorySearchFromWidgetActionRequest,\n    IUserDirectorySearchFromWidgetResponseData,\n} from \"./interfaces/UserDirectorySearchAction\";\nimport {\n    IReadRoomAccountDataFromWidgetActionRequest,\n    IReadRoomAccountDataFromWidgetResponseData,\n} from \"./interfaces/ReadRoomAccountDataAction\";\nimport {\n    IGetMediaConfigActionFromWidgetActionRequest,\n    IGetMediaConfigActionFromWidgetResponseData,\n} from \"./interfaces/GetMediaConfigAction\";\nimport {\n    IUpdateDelayedEventFromWidgetActionRequest,\n    UpdateDelayedEventAction,\n} from \"./interfaces/UpdateDelayedEventAction\";\nimport {\n    IUploadFileActionFromWidgetActionRequest,\n    IUploadFileActionFromWidgetResponseData,\n} from \"./interfaces/UploadFileAction\";\nimport {\n    IDownloadFileActionFromWidgetActionRequest,\n    IDownloadFileActionFromWidgetResponseData,\n} from \"./interfaces/DownloadFileAction\";\nimport { IThemeChangeActionRequestData } from \"./interfaces/ThemeChangeAction\";\nimport { IUpdateStateToWidgetRequestData } from \"./interfaces/UpdateStateAction\";\n\n/**\n * API handler for the client side of widgets. This raises events\n * for each action received as `action:${action}` (eg: \"action:screenshot\").\n * Default handling can be prevented by using preventDefault() on the\n * raised event. The default handling varies for each action: ones\n * which the SDK can handle safely are acknowledged appropriately and\n * ones which are unhandled (custom or require the client to do something)\n * are rejected with an error.\n *\n * Events which are preventDefault()ed must reply using the transport.\n * The events raised will have a default of an IWidgetApiRequest\n * interface.\n *\n * When the ClientWidgetApi is ready to start sending requests, it will\n * raise a \"ready\" CustomEvent. After the ready event fires, actions can\n * be sent and the transport will be ready.\n *\n * When the widget has indicated it has loaded, this class raises a\n * \"preparing\" CustomEvent. The preparing event does not indicate that\n * the widget is ready to receive communications - that is signified by\n * the ready event exclusively.\n *\n * This class only handles one widget at a time.\n */\nexport class ClientWidgetApi extends EventEmitter {\n    public readonly transport: ITransport;\n\n    private cachedWidgetVersions: ApiVersion[] | null = null;\n    // contentLoadedActionSent is used to check that only one ContentLoaded request is send.\n    private contentLoadedActionSent = false;\n    private allowedCapabilities = new Set<Capability>();\n    private allowedEvents: WidgetEventCapability[] = [];\n    private isStopped = false;\n    private turnServers: AsyncGenerator<ITurnServer> | null = null;\n    private contentLoadedWaitTimer?: ReturnType<typeof setTimeout>;\n    // Stores pending requests to push a room's state to the widget\n    private pushRoomStateTasks = new Set<Promise<void>>();\n    // Room ID → event type → state key → events to be pushed\n    private pushRoomStateResult = new Map<string, Map<string, Map<string, IRoomEvent>>>();\n    private flushRoomStateTask: Promise<void> | null = null;\n\n    /**\n     * Creates a new client widget API. This will instantiate the transport\n     * and start everything. When the iframe is loaded under the widget's\n     * conditions, a \"ready\" event will be raised.\n     * @param {Widget} widget The widget to communicate with.\n     * @param {HTMLIFrameElement} iframe The iframe the widget is in.\n     * @param {WidgetDriver} driver The driver for this widget/client.\n     */\n    public constructor(\n        public readonly widget: Widget,\n        private iframe: HTMLIFrameElement,\n        private driver: WidgetDriver,\n    ) {\n        super();\n        if (!iframe?.contentWindow) {\n            throw new Error(\"No iframe supplied\");\n        }\n        if (!widget) {\n            throw new Error(\"Invalid widget\");\n        }\n        if (!driver) {\n            throw new Error(\"Invalid driver\");\n        }\n        this.transport = new PostmessageTransport(WidgetApiDirection.ToWidget, widget.id, iframe.contentWindow, window);\n        this.transport.targetOrigin = widget.origin;\n        this.transport.on(\"message\", this.handleMessage.bind(this));\n\n        iframe.addEventListener(\"load\", this.onIframeLoad.bind(this));\n\n        this.transport.start();\n    }\n\n    public hasCapability(capability: Capability): boolean {\n        return this.allowedCapabilities.has(capability);\n    }\n\n    public canUseRoomTimeline(roomId: string | Symbols.AnyRoom): boolean {\n        return (\n            this.hasCapability(`org.matrix.msc2762.timeline:${Symbols.AnyRoom}`) ||\n            this.hasCapability(`org.matrix.msc2762.timeline:${roomId}`)\n        );\n    }\n\n    public canSendRoomEvent(eventType: string, msgtype: string | null = null): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsRoomEvent(EventDirection.Send, eventType, msgtype));\n    }\n\n    public canSendStateEvent(eventType: string, stateKey: string): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsStateEvent(EventDirection.Send, eventType, stateKey));\n    }\n\n    public canSendToDeviceEvent(eventType: string): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsToDeviceEvent(EventDirection.Send, eventType));\n    }\n\n    public canReceiveRoomEvent(eventType: string, msgtype: string | null = null): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsRoomEvent(EventDirection.Receive, eventType, msgtype));\n    }\n\n    public canReceiveStateEvent(eventType: string, stateKey: string | null): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsStateEvent(EventDirection.Receive, eventType, stateKey));\n    }\n\n    public canReceiveToDeviceEvent(eventType: string): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsToDeviceEvent(EventDirection.Receive, eventType));\n    }\n\n    public canReceiveRoomAccountData(eventType: string): boolean {\n        return this.allowedEvents.some((e) => e.matchesAsRoomAccountData(EventDirection.Receive, eventType));\n    }\n\n    public stop(): void {\n        this.isStopped = true;\n        this.transport.stop();\n    }\n\n    public async getWidgetVersions(): Promise<ApiVersion[]> {\n        if (Array.isArray(this.cachedWidgetVersions)) {\n            return Promise.resolve(this.cachedWidgetVersions);\n        }\n\n        try {\n            const r = await this.transport.send<IWidgetApiRequestEmptyData, ISupportedVersionsActionResponseData>(\n                WidgetApiToWidgetAction.SupportedApiVersions,\n                {},\n            );\n            this.cachedWidgetVersions = r.supported_versions;\n            return r.supported_versions;\n        } catch (e) {\n            console.warn(\"non-fatal error getting supported widget versions: \", e);\n            return [];\n        }\n    }\n\n    private beginCapabilities(): void {\n        // widget has loaded - tell all the listeners that\n        this.emit(\"preparing\");\n\n        let requestedCaps: Capability[];\n        this.transport\n            .send<IWidgetApiRequestEmptyData, ICapabilitiesActionResponseData>(WidgetApiToWidgetAction.Capabilities, {})\n            .then((caps) => {\n                requestedCaps = caps.capabilities;\n                return this.driver.validateCapabilities(new Set(caps.capabilities));\n            })\n            .then((allowedCaps) => {\n                this.allowCapabilities([...allowedCaps], requestedCaps);\n                this.emit(\"ready\");\n            })\n            .catch((e) => {\n                this.emit(\"error:preparing\", e);\n            });\n    }\n\n    private allowCapabilities(allowed: string[], requested: string[]): void {\n        console.log(`Widget ${this.widget.id} is allowed capabilities:`, allowed);\n\n        for (const c of allowed) this.allowedCapabilities.add(c);\n        const allowedEvents = WidgetEventCapability.findEventCapabilities(allowed);\n        this.allowedEvents.push(...allowedEvents);\n\n        this.transport\n            .send(WidgetApiToWidgetAction.NotifyCapabilities, <INotifyCapabilitiesActionRequestData>{\n                requested,\n                approved: Array.from(this.allowedCapabilities),\n            })\n            .catch((e) => {\n                console.warn(\"non-fatal error notifying widget of approved capabilities:\", e);\n            })\n            .then(() => {\n                this.emit(\"capabilitiesNotified\");\n            });\n\n        // Push the initial room state for all rooms with a timeline capability\n        for (const c of allowed) {\n            if (isTimelineCapability(c)) {\n                const roomId = getTimelineRoomIDFromCapability(c);\n                if (roomId === Symbols.AnyRoom) {\n                    for (const roomId of this.driver.getKnownRooms()) this.pushRoomState(roomId);\n                } else {\n                    this.pushRoomState(roomId);\n                }\n            }\n        }\n        // If new events are allowed and the currently viewed room isn't covered\n        // by a timeline capability, then we know that there could be some state\n        // in the viewed room that the widget hasn't learned about yet- push it.\n        if (allowedEvents.length > 0 && this.viewedRoomId !== null && !this.canUseRoomTimeline(this.viewedRoomId)) {\n            this.pushRoomState(this.viewedRoomId);\n        }\n    }\n\n    private onIframeLoad(ev: Event): void {\n        if (this.widget.waitForIframeLoad) {\n            // If the widget is set to waitForIframeLoad the capabilities immediately get setup after load.\n            // The client does not wait for the ContentLoaded action.\n            this.beginCapabilities();\n        } else {\n            // Reaching this means, that the Iframe got reloaded/loaded and\n            // the clientApi is awaiting the FIRST ContentLoaded action.\n            console.log(\"waitForIframeLoad is false: waiting for widget to send contentLoaded\");\n            this.contentLoadedWaitTimer = setTimeout(() => {\n                console.error(\n                    \"Widget specified waitForIframeLoad=false but timed out waiting for contentLoaded event!\",\n                );\n            }, 10000);\n            this.contentLoadedActionSent = false;\n        }\n    }\n\n    private handleContentLoadedAction(action: IContentLoadedActionRequest): void {\n        if (this.contentLoadedWaitTimer !== undefined) {\n            clearTimeout(this.contentLoadedWaitTimer);\n            this.contentLoadedWaitTimer = undefined;\n        }\n        if (this.contentLoadedActionSent) {\n            throw new Error(\n                \"Improper sequence: ContentLoaded Action can only be sent once after the widget loaded \" +\n                    \"and should only be used if waitForIframeLoad is false (default=true)\",\n            );\n        }\n        if (this.widget.waitForIframeLoad) {\n            this.transport.reply(action, <IWidgetApiErrorResponseData>{\n                error: {\n                    message:\n                        \"Improper sequence: not expecting ContentLoaded event if \" +\n                        \"waitForIframeLoad is true (default=true)\",\n                },\n            });\n        } else {\n            this.transport.reply(action, <IWidgetApiRequestEmptyData>{});\n            this.beginCapabilities();\n        }\n        this.contentLoadedActionSent = true;\n    }\n\n    private replyVersions(request: ISupportedVersionsActionRequest): void {\n        this.transport.reply<ISupportedVersionsActionResponseData>(request, {\n            supported_versions: CurrentApiVersions,\n        });\n    }\n\n    private async supportsUpdateState(): Promise<boolean> {\n        return (await this.getWidgetVersions()).includes(UnstableApiVersion.MSC2762_UPDATE_STATE);\n    }\n\n    private handleCapabilitiesRenegotiate(request: IRenegotiateCapabilitiesActionRequest): void {\n        // acknowledge first\n        this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n\n        const requested = request.data?.capabilities || [];\n        const newlyRequested = new Set(requested.filter((r) => !this.hasCapability(r)));\n        if (newlyRequested.size === 0) {\n            // Nothing to do - skip validation\n            this.allowCapabilities([], []);\n        }\n\n        this.driver\n            .validateCapabilities(newlyRequested)\n            .then((allowed) => this.allowCapabilities([...allowed], [...newlyRequested]));\n    }\n\n    private handleNavigate(request: INavigateActionRequest): void {\n        if (!this.hasCapability(MatrixCapabilities.MSC2931Navigate)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        if (!request.data?.uri || !request.data?.uri.toString().startsWith(\"https://matrix.to/#\")) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid matrix.to URI\" },\n            });\n        }\n\n        const onErr = (e: unknown): void => {\n            console.error(\"[ClientWidgetApi] Failed to handle navigation: \", e);\n            this.handleDriverError(e, request, \"Error handling navigation\");\n        };\n\n        try {\n            this.driver\n                .navigate(request.data.uri.toString())\n                .catch((e: unknown) => onErr(e))\n                .then(() => {\n                    return this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n                });\n        } catch (e) {\n            return onErr(e);\n        }\n    }\n\n    private handleOIDC(request: IGetOpenIDActionRequest): void {\n        let phase = 1; // 1 = initial request, 2 = after user manual confirmation\n\n        const replyState = (\n            state: OpenIDRequestState,\n            credential?: IOpenIDCredentials,\n        ): void | Promise<IWidgetApiAcknowledgeResponseData> => {\n            credential = credential || {};\n            if (phase > 1) {\n                return this.transport.send<IOpenIDCredentialsActionRequestData>(\n                    WidgetApiToWidgetAction.OpenIDCredentials,\n                    {\n                        state: state,\n                        original_request_id: request.requestId,\n                        ...credential,\n                    },\n                );\n            } else {\n                return this.transport.reply<IGetOpenIDActionResponseData>(request, {\n                    state: state,\n                    ...credential,\n                });\n            }\n        };\n\n        const replyError = (msg: string): void | Promise<IWidgetApiAcknowledgeResponseData> => {\n            console.error(\"[ClientWidgetApi] Failed to handle OIDC: \", msg);\n            if (phase > 1) {\n                // We don't have a way to indicate that a random error happened in this flow, so\n                // just block the attempt.\n                return replyState(OpenIDRequestState.Blocked);\n            } else {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: msg },\n                });\n            }\n        };\n\n        const observer = new SimpleObservable<IOpenIDUpdate>((update) => {\n            if (update.state === OpenIDRequestState.PendingUserConfirmation && phase > 1) {\n                observer.close();\n                return replyError(\"client provided out-of-phase response to OIDC flow\");\n            }\n\n            if (update.state === OpenIDRequestState.PendingUserConfirmation) {\n                replyState(update.state);\n                phase++;\n                return;\n            }\n\n            if (update.state === OpenIDRequestState.Allowed && !update.token) {\n                return replyError(\"client provided invalid OIDC token for an allowed request\");\n            }\n            if (update.state === OpenIDRequestState.Blocked) {\n                update.token = undefined; // just in case the client did something weird\n            }\n\n            observer.close();\n            return replyState(update.state, update.token);\n        });\n\n        this.driver.askOpenID(observer);\n    }\n    private handleReadRoomAccountData(request: IReadRoomAccountDataFromWidgetActionRequest): void | Promise<void> {\n        let events: Promise<IRoomAccountData[]> = Promise.resolve([]);\n        events = this.driver.readRoomAccountData(request.data.type);\n\n        if (!this.canReceiveRoomAccountData(request.data.type)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Cannot read room account data of this type\" },\n            });\n        }\n\n        return events.then((evs) => {\n            this.transport.reply<IReadRoomAccountDataFromWidgetResponseData>(request, { events: evs });\n        });\n    }\n\n    private async handleReadEvents(request: IReadEventFromWidgetActionRequest): Promise<void> {\n        if (!request.data.type) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event type\" },\n            });\n        }\n        if (request.data.limit !== undefined && (!request.data.limit || request.data.limit < 0)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - limit out of range\" },\n            });\n        }\n\n        let askRoomIds: string[];\n        if (request.data.room_ids === undefined) {\n            askRoomIds = this.viewedRoomId === null ? [] : [this.viewedRoomId];\n        } else if (request.data.room_ids === Symbols.AnyRoom) {\n            askRoomIds = this.driver.getKnownRooms().filter((roomId) => this.canUseRoomTimeline(roomId));\n        } else {\n            askRoomIds = request.data.room_ids;\n            for (const roomId of askRoomIds) {\n                if (!this.canUseRoomTimeline(roomId)) {\n                    return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                        error: { message: `Unable to access room timeline: ${roomId}` },\n                    });\n                }\n            }\n        }\n\n        const limit = request.data.limit || 0;\n        const since = request.data.since;\n\n        let stateKey: string | undefined = undefined;\n        let msgtype: string | undefined = undefined;\n        if (request.data.state_key !== undefined) {\n            stateKey = request.data.state_key === true ? undefined : request.data.state_key.toString();\n            if (!this.canReceiveStateEvent(request.data.type, stateKey ?? null)) {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Cannot read state events of this type\" },\n                });\n            }\n        } else {\n            msgtype = request.data.msgtype;\n            if (!this.canReceiveRoomEvent(request.data.type, msgtype)) {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Cannot read room events of this type\" },\n                });\n            }\n        }\n\n        let events: IRoomEvent[];\n\n        if (request.data.room_ids === undefined && askRoomIds.length === 0) {\n            // For backwards compatibility we still call the deprecated\n            // readRoomEvents and readStateEvents methods in case the client isn't\n            // letting us know the currently viewed room via setViewedRoomId\n            //\n            // This can be considered as a deprecated implementation.\n            // A driver should call `setViewedRoomId` on the widget messaging and implement the new readRoomState and readRoomTimeline\n            // Methods.\n            // This block makes sure that it is also possible to not use setViewedRoomId.\n            // readRoomTimeline and readRoomState are required however! Otherwise widget requests that include\n            // `room_ids` will fail.\n            console.warn(\n                \"The widgetDriver uses deprecated behaviour:\\n It does not set the viewedRoomId using `setViewedRoomId`\",\n            );\n            events = await // This returns [] with the current driver of Element Web.\n            // Add default implementations of the `readRoomEvents` and `readStateEvents`\n            // methods to use `readRoomTimeline` and `readRoomState` if they are not overwritten.\n            (request.data.state_key === undefined\n                ? this.driver.readRoomEvents(request.data.type, msgtype, limit, null, since)\n                : this.driver.readStateEvents(request.data.type, stateKey, limit, null));\n        } else if (await this.supportsUpdateState()) {\n            // Calling read_events with a stateKey still reads from the rooms timeline (not the room state).\n            events = (\n                await Promise.all(\n                    askRoomIds.map((roomId) =>\n                        this.driver.readRoomTimeline(roomId, request.data.type, msgtype, stateKey, limit, since),\n                    ),\n                )\n            ).flat(1);\n        } else {\n            // TODO: remove this once `UnstableApiVersion.MSC2762_UPDATE_STATE` becomes stable.\n            // Before version `MSC2762_UPDATE_STATE` we used readRoomState for read_events actions.\n            events = (\n                request.data.state_key === undefined\n                    ? await Promise.all(\n                          askRoomIds.map((roomId) =>\n                              this.driver.readRoomTimeline(roomId, request.data.type, msgtype, stateKey, limit, since),\n                          ),\n                      )\n                    : await Promise.all(\n                          askRoomIds.map((roomId) => this.driver.readRoomState(roomId, request.data.type, stateKey)),\n                      )\n            ).flat(1);\n        }\n\n        this.transport.reply<IReadEventFromWidgetResponseData>(request, { events });\n    }\n\n    private handleSendEvent(request: ISendEventFromWidgetActionRequest): void {\n        if (!request.data.type) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event type\" },\n            });\n        }\n\n        if (!!request.data.room_id && !this.canUseRoomTimeline(request.data.room_id)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: `Unable to access room timeline: ${request.data.room_id}` },\n            });\n        }\n\n        const isDelayedEvent = request.data.delay !== undefined || request.data.parent_delay_id !== undefined;\n        if (isDelayedEvent && !this.hasCapability(MatrixCapabilities.MSC4157SendDelayedEvent)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        let sendEventPromise: Promise<ISendEventDetails | ISendDelayedEventDetails>;\n        if (request.data.state_key !== undefined) {\n            if (!this.canSendStateEvent(request.data.type, request.data.state_key)) {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Cannot send state events of this type\" },\n                });\n            }\n\n            if (!isDelayedEvent) {\n                sendEventPromise = this.driver.sendEvent(\n                    request.data.type,\n                    request.data.content || {},\n                    request.data.state_key,\n                    request.data.room_id,\n                );\n            } else {\n                sendEventPromise = this.driver.sendDelayedEvent(\n                    request.data.delay ?? null,\n                    request.data.parent_delay_id ?? null,\n                    request.data.type,\n                    request.data.content || {},\n                    request.data.state_key,\n                    request.data.room_id,\n                );\n            }\n        } else {\n            const content = (request.data.content as { msgtype?: string }) || {};\n            const msgtype = content[\"msgtype\"];\n            if (!this.canSendRoomEvent(request.data.type, msgtype)) {\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Cannot send room events of this type\" },\n                });\n            }\n\n            if (!isDelayedEvent) {\n                sendEventPromise = this.driver.sendEvent(\n                    request.data.type,\n                    content,\n                    null, // not sending a state event\n                    request.data.room_id,\n                );\n            } else {\n                sendEventPromise = this.driver.sendDelayedEvent(\n                    request.data.delay ?? null,\n                    request.data.parent_delay_id ?? null,\n                    request.data.type,\n                    content,\n                    null, // not sending a state event\n                    request.data.room_id,\n                );\n            }\n        }\n\n        sendEventPromise\n            .then((sentEvent) => {\n                return this.transport.reply<ISendEventFromWidgetResponseData>(request, {\n                    room_id: sentEvent.roomId,\n                    ...(\"eventId\" in sentEvent\n                        ? {\n                              event_id: sentEvent.eventId,\n                          }\n                        : {\n                              delay_id: sentEvent.delayId,\n                          }),\n                });\n            })\n            .catch((e: unknown) => {\n                console.error(\"error sending event: \", e);\n                this.handleDriverError(e, request, \"Error sending event\");\n            });\n    }\n\n    private handleUpdateDelayedEvent(request: IUpdateDelayedEventFromWidgetActionRequest): void {\n        if (!request.data.delay_id) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing delay_id\" },\n            });\n        }\n\n        if (!this.hasCapability(MatrixCapabilities.MSC4157UpdateDelayedEvent)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        switch (request.data.action) {\n            case UpdateDelayedEventAction.Cancel:\n            case UpdateDelayedEventAction.Restart:\n            case UpdateDelayedEventAction.Send:\n                this.driver\n                    .updateDelayedEvent(request.data.delay_id, request.data.action)\n                    .then(() => {\n                        return this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n                    })\n                    .catch((e: unknown) => {\n                        console.error(\"error updating delayed event: \", e);\n                        this.handleDriverError(e, request, \"Error updating delayed event\");\n                    });\n                break;\n            default:\n                return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"Invalid request - unsupported action\" },\n                });\n        }\n    }\n\n    private async handleSendToDevice(request: ISendToDeviceFromWidgetActionRequest): Promise<void> {\n        if (!request.data.type) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event type\" },\n            });\n        } else if (!request.data.messages) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event contents\" },\n            });\n        } else if (typeof request.data.encrypted !== \"boolean\") {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing encryption flag\" },\n            });\n        } else if (!this.canSendToDeviceEvent(request.data.type)) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Cannot send to-device events of this type\" },\n            });\n        } else {\n            try {\n                await this.driver.sendToDevice(request.data.type, request.data.encrypted, request.data.messages);\n                await this.transport.reply<ISendToDeviceFromWidgetResponseData>(request, {});\n            } catch (e) {\n                console.error(\"error sending to-device event\", e);\n                this.handleDriverError(e, request, \"Error sending event\");\n            }\n        }\n    }\n\n    private async pollTurnServers(turnServers: AsyncGenerator<ITurnServer>, initialServer: ITurnServer): Promise<void> {\n        try {\n            await this.transport.send<IUpdateTurnServersRequestData>(\n                WidgetApiToWidgetAction.UpdateTurnServers,\n                initialServer as IUpdateTurnServersRequestData, // it's compatible, but missing the index signature\n            );\n\n            // Pick the generator up where we left off\n            for await (const server of turnServers) {\n                await this.transport.send<IUpdateTurnServersRequestData>(\n                    WidgetApiToWidgetAction.UpdateTurnServers,\n                    server as IUpdateTurnServersRequestData, // it's compatible, but missing the index signature\n                );\n            }\n        } catch (e) {\n            console.error(\"error polling for TURN servers\", e);\n        }\n    }\n\n    private async handleWatchTurnServers(request: IWatchTurnServersRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC3846TurnServers)) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        } else if (this.turnServers) {\n            // We're already polling, so this is a no-op\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n        } else {\n            try {\n                const turnServers = this.driver.getTurnServers();\n\n                // Peek at the first result, so we can at least verify that the\n                // client isn't banned from getting TURN servers entirely\n                const { done, value } = await turnServers.next();\n                if (done) throw new Error(\"Client refuses to provide any TURN servers\");\n                await this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n\n                // Start the poll loop, sending the widget the initial result\n                this.pollTurnServers(turnServers, value);\n                this.turnServers = turnServers;\n            } catch (e) {\n                console.error(\"error getting first TURN server results\", e);\n                await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                    error: { message: \"TURN servers not available\" },\n                });\n            }\n        }\n    }\n\n    private async handleUnwatchTurnServers(request: IUnwatchTurnServersRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC3846TurnServers)) {\n            await this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        } else if (!this.turnServers) {\n            // We weren't polling anyways, so this is a no-op\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n        } else {\n            // Stop the generator, allowing it to clean up\n            await this.turnServers.return(undefined);\n            this.turnServers = null;\n            await this.transport.reply<IWidgetApiAcknowledgeResponseData>(request, {});\n        }\n    }\n\n    private async handleReadRelations(request: IReadRelationsFromWidgetActionRequest): Promise<void> {\n        if (!request.data.event_id) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing event ID\" },\n            });\n        }\n\n        if (request.data.limit !== undefined && request.data.limit < 0) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - limit out of range\" },\n            });\n        }\n\n        if (request.data.room_id !== undefined && !this.canUseRoomTimeline(request.data.room_id)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: `Unable to access room timeline: ${request.data.room_id}` },\n            });\n        }\n\n        try {\n            const result = await this.driver.readEventRelations(\n                request.data.event_id,\n                request.data.room_id,\n                request.data.rel_type,\n                request.data.event_type,\n                request.data.from,\n                request.data.to,\n                request.data.limit,\n                request.data.direction,\n            );\n\n            // only return events that the user has the permission to receive\n            const chunk = result.chunk.filter((e) => {\n                if (e.state_key !== undefined) {\n                    return this.canReceiveStateEvent(e.type, e.state_key);\n                } else {\n                    return this.canReceiveRoomEvent(e.type, (e.content as { msgtype?: string })[\"msgtype\"]);\n                }\n            });\n\n            return this.transport.reply<IReadRelationsFromWidgetResponseData>(request, {\n                chunk,\n                prev_batch: result.prevBatch,\n                next_batch: result.nextBatch,\n            });\n        } catch (e) {\n            console.error(\"error getting the relations\", e);\n            this.handleDriverError(e, request, \"Unexpected error while reading relations\");\n        }\n    }\n\n    private async handleUserDirectorySearch(request: IUserDirectorySearchFromWidgetActionRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC3973UserDirectorySearch)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        if (typeof request.data.search_term !== \"string\") {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - missing search term\" },\n            });\n        }\n\n        if (request.data.limit !== undefined && request.data.limit < 0) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Invalid request - limit out of range\" },\n            });\n        }\n\n        try {\n            const result = await this.driver.searchUserDirectory(request.data.search_term, request.data.limit);\n\n            return this.transport.reply<IUserDirectorySearchFromWidgetResponseData>(request, {\n                limited: result.limited,\n                results: result.results.map((r) => ({\n                    user_id: r.userId,\n                    display_name: r.displayName,\n                    avatar_url: r.avatarUrl,\n                })),\n            });\n        } catch (e) {\n            console.error(\"error searching in the user directory\", e);\n            this.handleDriverError(e, request, \"Unexpected error while searching in the user directory\");\n        }\n    }\n\n    private async handleGetMediaConfig(request: IGetMediaConfigActionFromWidgetActionRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC4039UploadFile)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        try {\n            const result = await this.driver.getMediaConfig();\n\n            return this.transport.reply<IGetMediaConfigActionFromWidgetResponseData>(request, result);\n        } catch (e) {\n            console.error(\"error while getting the media configuration\", e);\n            this.handleDriverError(e, request, \"Unexpected error while getting the media configuration\");\n        }\n    }\n\n    private async handleUploadFile(request: IUploadFileActionFromWidgetActionRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC4039UploadFile)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        try {\n            const result = await this.driver.uploadFile(request.data.file);\n\n            return this.transport.reply<IUploadFileActionFromWidgetResponseData>(request, {\n                content_uri: result.contentUri,\n            });\n        } catch (e) {\n            console.error(\"error while uploading a file\", e);\n            this.handleDriverError(e, request, \"Unexpected error while uploading a file\");\n        }\n    }\n\n    private async handleDownloadFile(request: IDownloadFileActionFromWidgetActionRequest): Promise<void> {\n        if (!this.hasCapability(MatrixCapabilities.MSC4039DownloadFile)) {\n            return this.transport.reply<IWidgetApiErrorResponseData>(request, {\n                error: { message: \"Missing capability\" },\n            });\n        }\n\n        try {\n            const result = await this.driver.downloadFile(request.data.content_uri);\n\n            return this.transport.reply<IDownloadFileActionFromWidgetResponseData>(request, { file: result.file });\n        } catch (e) {\n            console.error(\"error while downloading a file\", e);\n            this.handleDriverError(e, request, \"Unexpected error while downloading a file\");\n        }\n    }\n\n    private handleDriverError(e: unknown, request: IWidgetApiRequest, message: string): void {\n        const data = this.driver.processError(e);\n        this.transport.reply<IWidgetApiErrorResponseData>(request, {\n            error: {\n                message,\n                ...data,\n            },\n        });\n    }\n\n    private handleMessage(ev: CustomEvent<IWidgetApiRequest>): void | Promise<void> {\n        if (this.isStopped) return;\n        const actionEv = new CustomEvent(`action:${ev.detail.action}`, {\n            detail: ev.detail,\n            cancelable: true,\n        });\n        this.emit(`action:${ev.detail.action}`, actionEv);\n        if (!actionEv.defaultPrevented) {\n            switch (ev.detail.action) {\n                case WidgetApiFromWidgetAction.ContentLoaded:\n                    return this.handleContentLoadedAction(<IContentLoadedActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.SupportedApiVersions:\n                    return this.replyVersions(<ISupportedVersionsActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.SendEvent:\n                    return this.handleSendEvent(<ISendEventFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.SendToDevice:\n                    return this.handleSendToDevice(<ISendToDeviceFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.GetOpenIDCredentials:\n                    return this.handleOIDC(<IGetOpenIDActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC2931Navigate:\n                    return this.handleNavigate(<INavigateActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC2974RenegotiateCapabilities:\n                    return this.handleCapabilitiesRenegotiate(<IRenegotiateCapabilitiesActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC2876ReadEvents:\n                    return this.handleReadEvents(<IReadEventFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.WatchTurnServers:\n                    return this.handleWatchTurnServers(<IWatchTurnServersRequest>ev.detail);\n                case WidgetApiFromWidgetAction.UnwatchTurnServers:\n                    return this.handleUnwatchTurnServers(<IUnwatchTurnServersRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC3869ReadRelations:\n                    return this.handleReadRelations(<IReadRelationsFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC3973UserDirectorySearch:\n                    return this.handleUserDirectorySearch(<IUserDirectorySearchFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.BeeperReadRoomAccountData:\n                    return this.handleReadRoomAccountData(<IReadRoomAccountDataFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC4039GetMediaConfigAction:\n                    return this.handleGetMediaConfig(<IGetMediaConfigActionFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC4039UploadFileAction:\n                    return this.handleUploadFile(<IUploadFileActionFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC4039DownloadFileAction:\n                    return this.handleDownloadFile(<IDownloadFileActionFromWidgetActionRequest>ev.detail);\n                case WidgetApiFromWidgetAction.MSC4157UpdateDelayedEvent:\n                    return this.handleUpdateDelayedEvent(<IUpdateDelayedEventFromWidgetActionRequest>ev.detail);\n\n                default:\n                    return this.transport.reply(ev.detail, <IWidgetApiErrorResponseData>{\n                        error: {\n                            message: \"Unknown or unsupported action: \" + ev.detail.action,\n                        },\n                    });\n            }\n        }\n    }\n\n    /**\n     * Informs the widget that the client's theme has changed.\n     * @param theme The theme data, as an object with arbitrary contents.\n     */\n    public updateTheme(theme: IThemeChangeActionRequestData): Promise<IWidgetApiResponseData> {\n        return this.transport.send(WidgetApiToWidgetAction.ThemeChange, theme);\n    }\n\n    /**\n     * Informs the widget that the client's language has changed.\n     * @param lang The BCP 47 identifier representing the client's current language.\n     */\n    public updateLanguage(lang: string): Promise<IWidgetApiResponseData> {\n        return this.transport.send(WidgetApiToWidgetAction.LanguageChange, { lang });\n    }\n\n    /**\n     * Takes a screenshot of the widget.\n     * @returns Resolves to the widget's screenshot.\n     * @throws Throws if there is a problem.\n     */\n    public takeScreenshot(): Promise<IScreenshotActionResponseData> {\n        return this.transport.send(WidgetApiToWidgetAction.TakeScreenshot, <IWidgetApiRequestEmptyData>{});\n    }\n\n    /**\n     * Alerts the widget to whether or not it is currently visible.\n     * @param {boolean} isVisible Whether the widget is visible or not.\n     * @returns {Promise<IWidgetApiResponseData>} Resolves when the widget acknowledges the update.\n     */\n    public updateVisibility(isVisible: boolean): Promise<IWidgetApiResponseData> {\n        return this.transport.send(WidgetApiToWidgetAction.UpdateVisibility, <IVisibilityActionRequestData>{\n            visible: isVisible,\n        });\n    }\n\n    public sendWidgetConfig(data: IModalWidgetOpenRequestData): Promise<void> {\n        return this.transport.send<IModalWidgetOpenRequestData>(WidgetApiToWidgetAction.WidgetConfig, data).then();\n    }\n\n    public notifyModalWidgetButtonClicked(id: IModalWidgetOpenRequestDataButton[\"id\"]): Promise<void> {\n        return this.transport\n            .send<IModalWidgetButtonClickedRequestData>(WidgetApiToWidgetAction.ButtonClicked, { id })\n            .then();\n    }\n\n    public notifyModalWidgetClose(data: IModalWidgetReturnData): Promise<void> {\n        return this.transport.send<IModalWidgetReturnData>(WidgetApiToWidgetAction.CloseModalWidget, data).then();\n    }\n\n    /**\n     * Feeds an event to the widget. As a client you are expected to call this\n     * for every new event in every room to which you are joined or invited.\n     * @param {IRoomEvent} rawEvent The event to (try to) send to the widget.\n     * @param {string} currentViewedRoomId The room ID the user is currently\n     *   interacting with. Not the room ID of the event.\n     * @returns {Promise<void>} Resolves when delivered or if the widget is not\n     *   able to read the event due to permissions, rejects if the widget failed\n     *   to handle the event.\n     * @deprecated It is recommended to communicate the viewed room ID by calling\n     *   {@link ClientWidgetApi.setViewedRoomId} rather than passing it to this\n     *   method.\n     */\n    public async feedEvent(rawEvent: IRoomEvent, currentViewedRoomId: string): Promise<void>;\n    /**\n     * Feeds an event to the widget. As a client you are expected to call this\n     * for every new event (including state events) in every room to which you are joined or invited.\n     * @param {IRoomEvent} rawEvent The event to (try to) send to the widget.\n     * @returns {Promise<void>} Resolves when delivered or if the widget is not\n     *   able to read the event due to permissions, rejects if the widget failed\n     *   to handle the event.\n     */\n    public async feedEvent(rawEvent: IRoomEvent): Promise<void>;\n    public async feedEvent(rawEvent: IRoomEvent, currentViewedRoomId?: string): Promise<void> {\n        if (currentViewedRoomId !== undefined) this.setViewedRoomId(currentViewedRoomId);\n        if (rawEvent.room_id !== this.viewedRoomId && !this.canUseRoomTimeline(rawEvent.room_id)) {\n            return; // no-op\n        }\n\n        if (rawEvent.state_key !== undefined && rawEvent.state_key !== null) {\n            // state event\n            if (!this.canReceiveStateEvent(rawEvent.type, rawEvent.state_key)) {\n                return; // no-op\n            }\n        } else {\n            // message event\n            if (!this.canReceiveRoomEvent(rawEvent.type, (rawEvent.content as { msgtype?: string })?.[\"msgtype\"])) {\n                return; // no-op\n            }\n        }\n\n        // Feed the event into the widget\n        await this.transport.send<ISendEventToWidgetRequestData>(\n            WidgetApiToWidgetAction.SendEvent,\n            // it's compatible, but missing the index signature\n            rawEvent as ISendEventToWidgetRequestData,\n        );\n    }\n\n    /**\n     * Feeds a to-device event to the widget. As a client you are expected to\n     * call this for every to-device event you receive.\n     * @param {IRoomEvent} rawEvent The event to (try to) send to the widget.\n     * @param {boolean} encrypted Whether the event contents were encrypted.\n     * @returns {Promise<void>} Resolves when delivered or if the widget is not\n     *   able to receive the event due to permissions, rejects if the widget\n     *   failed to handle the event.\n     */\n    public async feedToDevice(rawEvent: IRoomEvent, encrypted: boolean): Promise<void> {\n        if (this.canReceiveToDeviceEvent(rawEvent.type)) {\n            await this.transport.send<ISendToDeviceToWidgetRequestData>(\n                WidgetApiToWidgetAction.SendToDevice,\n                // it's compatible, but missing the index signature\n                { ...rawEvent, encrypted } as ISendToDeviceToWidgetRequestData,\n            );\n        }\n    }\n\n    private viewedRoomId: string | null = null;\n\n    /**\n     * Indicate that a room is being viewed (making it possible for the widget\n     * to interact with it).\n     */\n    public setViewedRoomId(roomId: string | null): void {\n        this.viewedRoomId = roomId;\n        // If the widget doesn't have timeline permissions for the room then\n        // this is its opportunity to learn the room state. We push the entire\n        // room state, which could be redundant if this room had been viewed\n        // once before, but it's easier than selectively pushing just the bits\n        // of state that changed while the room was in the background.\n        if (roomId !== null && !this.canUseRoomTimeline(roomId)) this.pushRoomState(roomId);\n    }\n\n    private async flushRoomState(): Promise<void> {\n        try {\n            // Only send a single action once all concurrent tasks have completed\n            do await Promise.all([...this.pushRoomStateTasks]);\n            while (this.pushRoomStateTasks.size > 0);\n\n            const events: IRoomEvent[] = [];\n            for (const eventTypeMap of this.pushRoomStateResult.values()) {\n                for (const stateKeyMap of eventTypeMap.values()) {\n                    events.push(...stateKeyMap.values());\n                }\n            }\n            if ((await this.getWidgetVersions()).includes(UnstableApiVersion.MSC2762_UPDATE_STATE)) {\n                // Only send state updates when using UpdateState. Otherwise the SendEvent action will be responsible for state updates.\n                await this.transport.send<IUpdateStateToWidgetRequestData>(WidgetApiToWidgetAction.UpdateState, {\n                    state: events,\n                });\n            }\n        } finally {\n            this.flushRoomStateTask = null;\n        }\n    }\n\n    /**\n     * Read the room's state and push all entries that the widget is allowed to\n     * read through to the widget.\n     */\n    private pushRoomState(roomId: string): void {\n        for (const cap of this.allowedEvents) {\n            if (cap.kind === EventKind.State && cap.direction === EventDirection.Receive) {\n                // Initiate the task\n                const events = this.driver.readRoomState(roomId, cap.eventType, cap.keyStr ?? undefined);\n                const task = events\n                    .then(\n                        (events) => {\n                            // When complete, queue the resulting events to be\n                            // pushed to the widget\n                            for (const event of events) {\n                                let eventTypeMap = this.pushRoomStateResult.get(roomId);\n                                if (eventTypeMap === undefined) {\n                                    eventTypeMap = new Map();\n                                    this.pushRoomStateResult.set(roomId, eventTypeMap);\n                                }\n                                let stateKeyMap = eventTypeMap.get(cap.eventType);\n                                if (stateKeyMap === undefined) {\n                                    stateKeyMap = new Map();\n                                    eventTypeMap.set(cap.eventType, stateKeyMap);\n                                }\n                                if (!stateKeyMap.has(event.state_key!)) stateKeyMap.set(event.state_key!, event);\n                            }\n                        },\n                        (e) =>\n                            console.error(\n                                `Failed to read room state for ${roomId} (${cap.eventType}, ${cap.keyStr})`,\n                                e,\n                            ),\n                    )\n                    .then(() => {\n                        // Mark request as no longer pending\n                        this.pushRoomStateTasks.delete(task);\n                    });\n\n                // Mark task as pending\n                this.pushRoomStateTasks.add(task);\n                // Assuming no other tasks are already happening concurrently,\n                // schedule the widget action that actually pushes the events\n                this.flushRoomStateTask ??= this.flushRoomState();\n                this.flushRoomStateTask.catch((e) => console.error(\"Failed to push room state\", e));\n            }\n        }\n    }\n\n    /**\n     * Feeds a room state update to the widget. As a client you are expected to\n     * call this for every state update in every room to which you are joined or\n     * invited.\n     * @param {IRoomEvent} rawEvent The state event corresponding to the updated\n     *   room state entry.\n     * @returns {Promise<void>} Resolves when delivered or if the widget is not\n     *   able to receive the room state due to permissions, rejects if the\n     *   widget failed to handle the update.\n     */\n    public async feedStateUpdate(rawEvent: IRoomEvent): Promise<void> {\n        if (rawEvent.state_key === undefined) throw new Error(\"Not a state event\");\n        if (\n            (rawEvent.room_id === this.viewedRoomId || this.canUseRoomTimeline(rawEvent.room_id)) &&\n            this.canReceiveStateEvent(rawEvent.type, rawEvent.state_key)\n        ) {\n            // Updates could race with the initial push of the room's state\n            if (this.pushRoomStateTasks.size === 0) {\n                // No initial push tasks are pending; safe to send immediately\n                if ((await this.getWidgetVersions()).includes(UnstableApiVersion.MSC2762_UPDATE_STATE)) {\n                    // Only send state updates when using UpdateState. Otherwise the SendEvent action will be responsible for state updates.\n                    await this.transport.send<IUpdateStateToWidgetRequestData>(WidgetApiToWidgetAction.UpdateState, {\n                        state: [rawEvent],\n                    });\n                }\n            } else {\n                // Lump the update in with whatever data will be sent in the\n                // initial push later. Even if we set it to an \"outdated\" entry\n                // here, we can count on any newer entries being passed to this\n                // same method eventually; this won't cause stuck state.\n                let eventTypeMap = this.pushRoomStateResult.get(rawEvent.room_id);\n                if (eventTypeMap === undefined) {\n                    eventTypeMap = new Map();\n                    this.pushRoomStateResult.set(rawEvent.room_id, eventTypeMap);\n                }\n                let stateKeyMap = eventTypeMap.get(rawEvent.type);\n                if (stateKeyMap === undefined) {\n                    stateKeyMap = new Map();\n                    eventTypeMap.set(rawEvent.type, stateKeyMap);\n                }\n                if (!stateKeyMap.has(rawEvent.type)) stateKeyMap.set(rawEvent.state_key, rawEvent);\n                do await Promise.all([...this.pushRoomStateTasks]);\n                while (this.pushRoomStateTasks.size > 0);\n                await this.flushRoomStateTask;\n            }\n        }\n    }\n}\n", "/*\n * Copyright 2020 - 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IWidgetApiResponse, IWidgetApiResponseData } from \"./IWidgetApiResponse\";\n\n/**\n * The format of errors returned by Matrix API requests\n * made by a WidgetDriver.\n */\nexport interface IMatrixApiError {\n    /** The HTTP status code of the associated request. */\n    http_status: number; // eslint-disable-line camelcase\n    /** Any HTTP response headers that are relevant to the error. */\n    http_headers: { [name: string]: string }; // eslint-disable-line camelcase\n    /** The URL of the failed request. */\n    url: string;\n    /** @see {@link https://spec.matrix.org/latest/client-server-api/#standard-error-response} */\n    response: {\n        errcode: string;\n        error: string;\n    } & IWidgetApiResponseData; // extensible\n}\n\nexport interface IWidgetApiErrorResponseDataDetails {\n    /** Set if the error came from a Matrix API request made by a widget driver */\n    matrix_api_error?: IMatrixApiError; // eslint-disable-line camelcase\n}\n\nexport interface IWidgetApiErrorResponseData extends IWidgetApiResponseData {\n    error: {\n        /** A user-friendly string describing the error */\n        message: string;\n    } & IWidgetApiErrorResponseDataDetails;\n}\n\nexport interface IWidgetApiErrorResponse extends IWidgetApiResponse {\n    response: IWidgetApiErrorResponseData;\n}\n\nexport function isErrorResponse(responseData: IWidgetApiResponseData): responseData is IWidgetApiErrorResponseData {\n    const error = responseData.error;\n    return typeof error === \"object\" && error !== null && \"message\" in error && typeof error.message === \"string\";\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum WidgetKind {\n    Room = \"room\",\n    Account = \"account\",\n    Modal = \"modal\",\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum ModalButtonKind {\n    Primary = \"m.primary\",\n    Secondary = \"m.secondary\",\n    Warning = \"m.warning\",\n    Danger = \"m.danger\",\n    Link = \"m.link\",\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function isValidUrl(val: string): boolean {\n    if (!val) return false; // easy: not valid if not present\n\n    try {\n        const parsed = new URL(val);\n        if (parsed.protocol !== \"http\" && parsed.protocol !== \"https\") {\n            return false;\n        }\n        return true;\n    } catch (e) {\n        if (e instanceof TypeError) {\n            return false;\n        }\n        throw e;\n    }\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function assertPresent<O extends Record<any, any>>(obj: O, key: keyof O): void {\n    if (!obj[key]) {\n        throw new Error(`${String(key)} is required`);\n    }\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IWidget, IWidgetData, WidgetType } from \"..\";\nimport { assertPresent } from \"./validation/utils\";\nimport { ITemplateParams, runTemplate } from \"..\";\n\n/**\n * Represents the barest form of widget.\n */\nexport class Widget {\n    public constructor(private definition: IWidget) {\n        if (!this.definition) throw new Error(\"Definition is required\");\n\n        assertPresent(definition, \"id\");\n        assertPresent(definition, \"creatorUserId\");\n        assertPresent(definition, \"type\");\n        assertPresent(definition, \"url\");\n    }\n\n    /**\n     * The user ID who created the widget.\n     */\n    public get creatorUserId(): string {\n        return this.definition.creatorUserId;\n    }\n\n    /**\n     * The type of widget.\n     */\n    public get type(): WidgetType {\n        return this.definition.type;\n    }\n\n    /**\n     * The ID of the widget.\n     */\n    public get id(): string {\n        return this.definition.id;\n    }\n\n    /**\n     * The name of the widget, or null if not set.\n     */\n    public get name(): string | null {\n        return this.definition.name || null;\n    }\n\n    /**\n     * The title for the widget, or null if not set.\n     */\n    public get title(): string | null {\n        return this.rawData.title || null;\n    }\n\n    /**\n     * The templated URL for the widget.\n     */\n    public get templateUrl(): string {\n        return this.definition.url;\n    }\n\n    /**\n     * The origin for this widget.\n     */\n    public get origin(): string {\n        return new URL(this.templateUrl).origin;\n    }\n\n    /**\n     * Whether or not the client should wait for the iframe to load. Defaults\n     * to true.\n     */\n    public get waitForIframeLoad(): boolean {\n        if (this.definition.waitForIframeLoad === false) return false;\n        if (this.definition.waitForIframeLoad === true) return true;\n        return true; // default true\n    }\n\n    /**\n     * The raw data for the widget. This will always be defined, though\n     * may be empty.\n     */\n    public get rawData(): IWidgetData {\n        return this.definition.data || {};\n    }\n\n    /**\n     * Gets a complete widget URL for the client to render.\n     * @param {ITemplateParams} params The template parameters.\n     * @returns {string} A templated URL.\n     */\n    public getCompleteUrl(params: ITemplateParams): string {\n        return runTemplate(this.templateUrl, this.definition, params);\n    }\n}\n", "/*\n * Copyright 2020 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Widget } from \"./Widget\";\nimport { IWidget } from \"..\";\nimport { isValidUrl } from \"./validation/url\";\n\nexport interface IStateEvent {\n    event_id: string; // eslint-disable-line camelcase\n    room_id: string; // eslint-disable-line camelcase\n    type: string;\n    sender: string;\n    origin_server_ts: number; // eslint-disable-line camelcase\n    unsigned?: unknown;\n    content: unknown;\n    state_key: string; // eslint-disable-line camelcase\n}\n\nexport interface IAccountDataWidgets {\n    [widgetId: string]: {\n        type: \"m.widget\";\n        // the state_key is also the widget's ID\n        state_key: string; // eslint-disable-line camelcase\n        sender: string; // current user's ID\n        content: IWidget;\n        id?: string; // off-spec, but possible\n    };\n}\n\nexport class WidgetParser {\n    private constructor() {\n        // private constructor because this is a util class\n    }\n\n    /**\n     * Parses widgets from the \"m.widgets\" account data event. This will always\n     * return an array, though may be empty if no valid widgets were found.\n     * @param {IAccountDataWidgets} content The content of the \"m.widgets\" account data.\n     * @returns {Widget[]} The widgets in account data, or an empty array.\n     */\n    public static parseAccountData(content: IAccountDataWidgets): Widget[] {\n        if (!content) return [];\n\n        const result: Widget[] = [];\n        for (const widgetId of Object.keys(content)) {\n            const roughWidget = content[widgetId];\n            if (!roughWidget) continue;\n            if (roughWidget.type !== \"m.widget\" && roughWidget.type !== \"im.vector.modular.widgets\") continue;\n            if (!roughWidget.sender) continue;\n\n            const probableWidgetId = roughWidget.state_key || roughWidget.id;\n            if (probableWidgetId !== widgetId) continue;\n\n            const asStateEvent: IStateEvent = {\n                content: roughWidget.content,\n                sender: roughWidget.sender,\n                type: \"m.widget\",\n                state_key: widgetId,\n                event_id: \"$example\",\n                room_id: \"!example\",\n                origin_server_ts: 1,\n            };\n\n            const widget = WidgetParser.parseRoomWidget(asStateEvent);\n            if (widget) result.push(widget);\n        }\n\n        return result;\n    }\n\n    /**\n     * Parses all the widgets possible in the given array. This will always return\n     * an array, though may be empty if no widgets could be parsed.\n     * @param {IStateEvent[]} currentState The room state to parse.\n     * @returns {Widget[]} The widgets in the state, or an empty array.\n     */\n    public static parseWidgetsFromRoomState(currentState: IStateEvent[]): Widget[] {\n        if (!currentState) return [];\n        const result: Widget[] = [];\n        for (const state of currentState) {\n            const widget = WidgetParser.parseRoomWidget(state);\n            if (widget) result.push(widget);\n        }\n        return result;\n    }\n\n    /**\n     * Parses a state event into a widget. If the state event does not represent\n     * a widget (wrong event type, invalid widget, etc) then null is returned.\n     * @param {IStateEvent} stateEvent The state event.\n     * @returns {Widget|null} The widget, or null if invalid\n     */\n    public static parseRoomWidget(stateEvent: IStateEvent): Widget | null {\n        if (!stateEvent) return null;\n\n        // TODO: [Legacy] Remove legacy support\n        if (stateEvent.type !== \"m.widget\" && stateEvent.type !== \"im.vector.modular.widgets\") {\n            return null;\n        }\n\n        // Dev note: Throughout this function we have null safety to ensure that\n        // if the caller did not supply something useful that we don't error. This\n        // is done against the requirements of the interface because not everyone\n        // will have an interface to validate against.\n\n        const content = (stateEvent.content as IWidget) || {};\n\n        // Form our best approximation of a widget with the information we have\n        const estimatedWidget: IWidget = {\n            id: stateEvent.state_key,\n            creatorUserId: content[\"creatorUserId\"] || stateEvent.sender,\n            name: content[\"name\"],\n            type: content[\"type\"],\n            url: content[\"url\"],\n            waitForIframeLoad: content[\"waitForIframeLoad\"],\n            data: content[\"data\"],\n        };\n\n        // Finally, process that widget\n        return WidgetParser.processEstimatedWidget(estimatedWidget);\n    }\n\n    private static processEstimatedWidget(widget: IWidget): Widget | null {\n        // Validate that the widget has the best chance of passing as a widget\n        if (!widget.id || !widget.creatorUserId || !widget.type) {\n            return null;\n        }\n        if (!isValidUrl(widget.url)) {\n            return null;\n        }\n        // TODO: Validate data for known widget types\n        return new Widget(widget);\n    }\n}\n", "/*\n * Copyright 2020, 2021 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { IWidget } from \"..\";\n\nexport interface ITemplateParams {\n    widgetRoomId?: string;\n    currentUserId: string;\n    userDisplayName?: string;\n    userHttpAvatarUrl?: string;\n    clientId?: string;\n    clientTheme?: string;\n    clientLanguage?: string;\n    deviceId?: string;\n    baseUrl?: string;\n}\n\nexport function runTemplate(url: string, widget: IWidget, params: ITemplateParams): string {\n    // Always apply the supplied params over top of data to ensure the data can't lie about them.\n    const variables = Object.assign({}, widget.data, {\n        \"matrix_room_id\": params.widgetRoomId || \"\",\n        \"matrix_user_id\": params.currentUserId,\n        \"matrix_display_name\": params.userDisplayName || params.currentUserId,\n        \"matrix_avatar_url\": params.userHttpAvatarUrl || \"\",\n        \"matrix_widget_id\": widget.id,\n\n        // TODO: Convert to stable (https://github.com/matrix-org/matrix-doc/pull/2873)\n        \"org.matrix.msc2873.client_id\": params.clientId || \"\",\n        \"org.matrix.msc2873.client_theme\": params.clientTheme || \"\",\n        \"org.matrix.msc2873.client_language\": params.clientLanguage || \"\",\n\n        // TODO: Convert to stable (https://github.com/matrix-org/matrix-spec-proposals/pull/3819)\n        \"org.matrix.msc3819.matrix_device_id\": params.deviceId || \"\",\n\n        // TODO: Convert to stable (https://github.com/matrix-org/matrix-spec-proposals/pull/4039)\n        \"org.matrix.msc4039.matrix_base_url\": params.baseUrl || \"\",\n    });\n    let result = url;\n    for (const key of Object.keys(variables)) {\n        // Regex escape from https://stackoverflow.com/a/6969486/7037379\n        const pattern = `$${key}`.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n        const rexp = new RegExp(pattern, \"g\");\n\n        // This is technically not what we're supposed to do for a couple of reasons:\n        // 1. We are assuming that there won't later be a $key match after we replace a variable.\n        // 2. We are assuming that the variable is in a place where it can be escaped (eg: path or query string).\n        result = result.replace(rexp, encodeURIComponent(toString(variables[key])));\n    }\n    return result;\n}\n\nexport function toString(a: unknown): string {\n    if (a === null || a === undefined) {\n        return `${a}`;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    return String(a);\n}\n", "/*\n * Copyright 2020 - 2024 The Matrix.org Foundation C.I.C.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *         http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    Capability,\n    IOpenIDCredentials,\n    OpenIDRequestState,\n    SimpleObservable,\n    IRoomEvent,\n    IRoomAccountData,\n    ITurnServer,\n    IWidgetApiErrorResponseDataDetails,\n    UpdateDelayedEventAction,\n} from \"..\";\n\nexport interface ISendEventDetails {\n    roomId: string;\n    eventId: string;\n}\n\nexport interface ISendDelayedEventDetails {\n    roomId: string;\n    delayId: string;\n}\n\nexport interface IOpenIDUpdate {\n    state: OpenIDRequestState;\n    token?: IOpenIDCredentials;\n}\n\nexport interface IReadEventRelationsResult {\n    chunk: IRoomEvent[];\n    nextBatch?: string;\n    prevBatch?: string;\n}\n\nexport interface ISearchUserDirectoryResult {\n    limited: boolean;\n    results: Array<{\n        userId: string;\n        displayName?: string;\n        avatarUrl?: string;\n    }>;\n}\n\nexport interface IGetMediaConfigResult {\n    [key: string]: unknown;\n    \"m.upload.size\"?: number;\n}\n\n/**\n * Represents the functions and behaviour the widget-api is unable to\n * do, such as prompting the user for information or interacting with\n * the UI. Clients are expected to implement this class and override\n * any functions they need/want to support.\n *\n * This class assumes the client will have a context of a Widget\n * instance already.\n */\nexport abstract class WidgetDriver {\n    /**\n     * Verifies the widget's requested capabilities, returning the ones\n     * it is approved to use. Mutating the requested capabilities will\n     * have no effect.\n     *\n     * This SHOULD result in the user being prompted to approve/deny\n     * capabilities.\n     *\n     * By default this rejects all capabilities (returns an empty set).\n     * @param {Set<Capability>} requested The set of requested capabilities.\n     * @returns {Promise<Set<Capability>>} Resolves to the allowed capabilities.\n     */\n    public validateCapabilities(requested: Set<Capability>): Promise<Set<Capability>> {\n        return Promise.resolve(new Set());\n    }\n\n    /**\n     * Sends an event into a room. If `roomId` is falsy, the client should send the event\n     * into the room the user is currently looking at. The widget API will have already\n     * verified that the widget is capable of sending the event to that room.\n     * @param {string} eventType The event type to be sent.\n     * @param {*} content The content for the event.\n     * @param {string|null} stateKey The state key if this is a state event, otherwise null.\n     * May be an empty string.\n     * @param {string|null} roomId The room ID to send the event to. If falsy, the room the\n     * user is currently looking at.\n     * @returns {Promise<ISendEventDetails>} Resolves when the event has been sent with\n     * details of that event.\n     * @throws Rejected when the event could not be sent.\n     */\n    public sendEvent(\n        eventType: string,\n        content: unknown,\n        stateKey: string | null = null,\n        roomId: string | null = null,\n    ): Promise<ISendEventDetails> {\n        return Promise.reject(new Error(\"Failed to override function\"));\n    }\n\n    /**\n     * @experimental Part of MSC4140 & MSC4157\n     * Sends a delayed event into a room. If `roomId` is falsy, the client should send it\n     * into the room the user is currently looking at. The widget API will have already\n     * verified that the widget is capable of sending the event to that room.\n     * @param {number|null} delay How much later to send the event, or null to not send the\n     * event automatically. May not be null if {@link parentDelayId} is null.\n     * @param {string|null} parentDelayId The ID of the delayed event this one is grouped with,\n     * or null if it will be put in a new group. May not be null if {@link delay} is null.\n     * @param {string} eventType The event type of the event to be sent.\n     * @param {*} content The content for the event to be sent.\n     * @param {string|null} stateKey The state key if the event to be sent a state event,\n     * otherwise null. May be an empty string.\n     * @param {string|null} roomId The room ID to send the event to. If falsy, the room the\n     * user is currently looking at.\n     * @returns {Promise<ISendDelayedEventDetails>} Resolves when the delayed event has been\n     * prepared with details of how to refer to it for updating/sending/canceling it later.\n     * @throws Rejected when the delayed event could not be sent.\n     */\n    public sendDelayedEvent(\n        delay: number | null,\n        parentDelayId: string | null,\n        eventType: string,\n        content: unknown,\n        stateKey: string | null = null,\n        roomId: string | null = null,\n    ): Promise<ISendDelayedEventDetails> {\n        return Promise.reject(new Error(\"Failed to override function\"));\n    }\n\n    /**\n     * @experimental Part of MSC4140 & MSC4157\n     * Run the specified {@link action} for the delayed event matching the provided {@link delayId}.\n     * @throws Rejected when there is no matching delayed event, or when the action failed to run.\n     */\n    public updateDelayedEvent(delayId: string, action: UpdateDelayedEventAction): Promise<void> {\n        return Promise.reject(new Error(\"Failed to override function\"));\n    }\n\n    /**\n     * Sends a to-device event. The widget API will have already verified that the widget\n     * is capable of sending the event.\n     * @param {string} eventType The event type to be sent.\n     * @param {boolean} encrypted Whether to encrypt the message contents.\n     * @param {Object} contentMap A map from user ID and device ID to event content.\n     * @returns {Promise<void>} Resolves when the event has been sent.\n     * @throws Rejected when the event could not be sent.\n     */\n    public sendToDevice(\n        eventType: string,\n        encrypted: boolean,\n        contentMap: { [userId: string]: { [deviceId: string]: object } },\n    ): Promise<void> {\n        return Promise.reject(new Error(\"Failed to override function\"));\n    }\n    /**\n     * Reads an element of room account data. The widget API will have already verified that the widget is\n     * capable of receiving the `eventType` of the requested information. If `roomIds` is supplied, it may\n     * contain `Symbols.AnyRoom` to denote that the piece of room account data in each of the client's known\n     * rooms should be returned. When `null`, only the room the user is currently looking at should be considered.\n     * @param eventType The event type to be read.\n     * @param roomIds When null, the user's currently viewed room. Otherwise, the list of room IDs\n     * to look within, possibly containing Symbols.AnyRoom to denote all known rooms.\n     * @returns {Promise<IRoomAccountData[]>} Resolves to the element of room account data, or an empty array.\n     */\n    public readRoomAccountData(eventType: string, roomIds: string[] | null = null): Promise<IRoomAccountData[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Reads all events of the given type, and optionally `msgtype` (if applicable/defined),\n     * the user has access to. The widget API will have already verified that the widget is\n     * capable of receiving the events. Less events than the limit are allowed to be returned,\n     * but not more. If `roomIds` is supplied, it may contain `Symbols.AnyRoom` to denote that\n     * `limit` in each of the client's known rooms should be returned. When `null`, only the\n     * room the user is currently looking at should be considered. If `since` is specified but\n     * the event ID isn't present in the number of events fetched by the client due to `limit`,\n     * the client will return all the events.\n     * @param eventType The event type to be read.\n     * @param msgtype The msgtype of the events to be read, if applicable/defined.\n     * @param stateKey The state key of the events to be read, if applicable/defined.\n     * @param limit The maximum number of events to retrieve per room. Will be zero to denote \"as many\n     * as possible\".\n     * @param roomIds When null, the user's currently viewed room. Otherwise, the list of room IDs\n     * to look within, possibly containing Symbols.AnyRoom to denote all known rooms.\n     * @param since When null, retrieves the number of events specified by the \"limit\" parameter.\n     * Otherwise, the event ID at which only subsequent events will be returned, as many as specified\n     * in \"limit\".\n     * @returns {Promise<IRoomEvent[]>} Resolves to the room events, or an empty array.\n     * @deprecated Clients are advised to implement {@link WidgetDriver.readRoomTimeline} instead.\n     */\n    public readRoomEvents(\n        eventType: string,\n        msgtype: string | undefined,\n        limit: number,\n        roomIds: string[] | null = null,\n        since?: string,\n    ): Promise<IRoomEvent[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Reads all events of the given type, and optionally state key (if applicable/defined),\n     * the user has access to. The widget API will have already verified that the widget is\n     * capable of receiving the events. Less events than the limit are allowed to be returned,\n     * but not more. If `roomIds` is supplied, it may contain `Symbols.AnyRoom` to denote that\n     * `limit` in each of the client's known rooms should be returned. When `null`, only the\n     * room the user is currently looking at should be considered.\n     * @param eventType The event type to be read.\n     * @param stateKey The state key of the events to be read, if applicable/defined.\n     * @param limit The maximum number of events to retrieve. Will be zero to denote \"as many\n     * as possible\".\n     * @param roomIds When null, the user's currently viewed room. Otherwise, the list of room IDs\n     * to look within, possibly containing Symbols.AnyRoom to denote all known rooms.\n     * @returns {Promise<IRoomEvent[]>} Resolves to the state events, or an empty array.\n     * @deprecated Clients are advised to implement {@link WidgetDriver.readRoomTimeline} instead.\n     */\n    public readStateEvents(\n        eventType: string,\n        stateKey: string | undefined,\n        limit: number,\n        roomIds: string[] | null = null,\n    ): Promise<IRoomEvent[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Reads all events of the given type, and optionally `msgtype` (if applicable/defined),\n     * the user has access to. The widget API will have already verified that the widget is\n     * capable of receiving the events. Less events than the limit are allowed to be returned,\n     * but not more.\n     * @param roomId The ID of the room to look within.\n     * @param eventType The event type to be read.\n     * @param msgtype The msgtype of the events to be read, if applicable/defined.\n     * @param stateKey The state key of the events to be read, if applicable/defined.\n     * @param limit The maximum number of events to retrieve. Will be zero to denote \"as many as\n     * possible\".\n     * @param since When null, retrieves the number of events specified by the \"limit\" parameter.\n     * Otherwise, the event ID at which only subsequent events will be returned, as many as specified\n     * in \"limit\".\n     * @returns {Promise<IRoomEvent[]>} Resolves to the room events, or an empty array.\n     */\n    public readRoomTimeline(\n        roomId: string,\n        eventType: string,\n        msgtype: string | undefined,\n        stateKey: string | undefined,\n        limit: number,\n        since: string | undefined,\n    ): Promise<IRoomEvent[]> {\n        // For backward compatibility we try the deprecated methods, in case\n        // they're implemented\n        if (stateKey === undefined) return this.readRoomEvents(eventType, msgtype, limit, [roomId], since);\n        else return this.readStateEvents(eventType, stateKey, limit, [roomId]);\n    }\n\n    /**\n     * Reads the current values of all matching room state entries.\n     * @param roomId The ID of the room.\n     * @param eventType The event type of the entries to be read.\n     * @param stateKey The state key of the entry to be read. If undefined,\n     * all room state entries with a matching event type should be returned.\n     * @returns {Promise<IRoomEvent[]>} Resolves to the events representing the\n     * current values of the room state entries.\n     */\n    public readRoomState(roomId: string, eventType: string, stateKey: string | undefined): Promise<IRoomEvent[]> {\n        return this.readStateEvents(eventType, stateKey, Number.MAX_SAFE_INTEGER, [roomId]);\n    }\n\n    /**\n     * Reads all events that are related to a given event. The widget API will\n     * have already verified that the widget is capable of receiving the event,\n     * or will make sure to reject access to events which are returned from this\n     * function, but are not capable of receiving. If `relationType` or `eventType`\n     * are set, the returned events should already be filtered. Less events than\n     * the limit are allowed to be returned, but not more.\n     * @param eventId The id of the parent event to be read.\n     * @param roomId The room to look within. When undefined, the user's\n     * currently viewed room.\n     * @param relationType The relationship type of child events to search for.\n     * When undefined, all relations are returned.\n     * @param eventType The event type of child events to search for. When undefined,\n     * all related events are returned.\n     * @param from The pagination token to start returning results from, as\n     * received from a previous call. If not supplied, results start at the most\n     * recent topological event known to the server.\n     * @param to The pagination token to stop returning results at. If not\n     * supplied, results continue up to limit or until there are no more events.\n     * @param limit The maximum number of events to retrieve per room. If not\n     * supplied, the server will apply a default limit.\n     * @param direction The direction to search for according to MSC3715\n     * @returns Resolves to the room relations.\n     */\n    public readEventRelations(\n        eventId: string,\n        roomId?: string,\n        relationType?: string,\n        eventType?: string,\n        from?: string,\n        to?: string,\n        limit?: number,\n        direction?: \"f\" | \"b\",\n    ): Promise<IReadEventRelationsResult> {\n        return Promise.resolve({ chunk: [] });\n    }\n\n    /**\n     * Asks the user for permission to validate their identity through OpenID Connect. The\n     * interface for this function is an observable which accepts the state machine of the\n     * OIDC exchange flow. For example, if the client/user blocks the request then it would\n     * feed back a `{state: Blocked}` into the observable. Similarly, if the user already\n     * approved the widget then a `{state: Allowed}` would be fed into the observable alongside\n     * the token itself. If the client is asking for permission, it should feed in a\n     * `{state: PendingUserConfirmation}` followed by the relevant Allowed or Blocked state.\n     *\n     * The widget API will reject the widget's request with an error if this contract is not\n     * met properly. By default, the widget driver will block all OIDC requests.\n     * @param {SimpleObservable<IOpenIDUpdate>} observer The observable to feed updates into.\n     */\n    public askOpenID(observer: SimpleObservable<IOpenIDUpdate>): void {\n        observer.update({ state: OpenIDRequestState.Blocked });\n    }\n\n    /**\n     * Navigates the client with a matrix.to URI. In future this function will also be provided\n     * with the Matrix URIs once matrix.to is replaced. The given URI will have already been\n     * lightly checked to ensure it looks like a valid URI, though the implementation is recommended\n     * to do further checks on the URI.\n     * @param {string} uri The URI to navigate to.\n     * @returns {Promise<void>} Resolves when complete.\n     * @throws Throws if there's a problem with the navigation, such as invalid format.\n     */\n    public navigate(uri: string): Promise<void> {\n        throw new Error(\"Navigation is not implemented\");\n    }\n\n    /**\n     * Polls for TURN server data, yielding an initial set of credentials as soon as possible, and\n     * thereafter yielding new credentials whenever the previous ones expire. The widget API will\n     * have already verified that the widget has permission to access TURN servers.\n     * @yields {ITurnServer} The TURN server URIs and credentials currently available to the client.\n     */\n    public getTurnServers(): AsyncGenerator<ITurnServer> {\n        throw new Error(\"TURN server support is not implemented\");\n    }\n\n    /**\n     * Search for users in the user directory.\n     * @param searchTerm The term to search for.\n     * @param limit The maximum number of results to return. If not supplied, the\n     * @returns Resolves to the search results.\n     */\n    public searchUserDirectory(searchTerm: string, limit?: number): Promise<ISearchUserDirectoryResult> {\n        return Promise.resolve({ limited: false, results: [] });\n    }\n\n    /**\n     * Get the config for the media repository.\n     * @returns Promise which resolves with an object containing the config.\n     */\n    public getMediaConfig(): Promise<IGetMediaConfigResult> {\n        throw new Error(\"Get media config is not implemented\");\n    }\n\n    /**\n     * Upload a file to the media repository on the homeserver.\n     * @param file - The object to upload. Something that can be sent to\n     *               XMLHttpRequest.send (typically a File).\n     * @returns Resolves to the location of the uploaded file.\n     */\n    public uploadFile(file: XMLHttpRequestBodyInit): Promise<{ contentUri: string }> {\n        throw new Error(\"Upload file is not implemented\");\n    }\n\n    /**\n     * Download a file from the media repository on the homeserver.\n     * @param contentUri - MXC URI of the file to download.\n     * @returns Resolves to the contents of the file.\n     */\n    public downloadFile(contentUri: string): Promise<{ file: XMLHttpRequestBodyInit }> {\n        throw new Error(\"Download file is not implemented\");\n    }\n\n    /**\n     * Gets the IDs of all joined or invited rooms currently known to the\n     * client.\n     * @returns The room IDs.\n     */\n    public getKnownRooms(): string[] {\n        throw new Error(\"Querying known rooms is not implemented\");\n    }\n\n    /**\n     * Expresses an error thrown by this driver in a format compatible with the Widget API.\n     * @param error The error to handle.\n     * @returns The error expressed as a {@link IWidgetApiErrorResponseDataDetails},\n     * or undefined if it cannot be expressed as one.\n     */\n    public processError(error: unknown): IWidgetApiErrorResponseDataDetails | undefined {\n        return undefined;\n    }\n}\n", "/*\nCopyright 2020 - 2021 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n        http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n// Primary structures\nexport * from \"./WidgetApi\";\nexport * from \"./ClientWidgetApi\";\nexport * from \"./Symbols\";\n\n// Transports (not sure why you'd use these directly, but might as well export all the things)\nexport type * from \"./transport/ITransport\";\nexport * from \"./transport/PostmessageTransport\";\n\n// Interfaces and simple models\nexport type * from \"./interfaces/ICustomWidgetData\";\nexport type * from \"./interfaces/IJitsiWidgetData\";\nexport type * from \"./interfaces/IStickerpickerWidgetData\";\nexport type * from \"./interfaces/IWidget\";\nexport * from \"./interfaces/WidgetType\";\nexport * from \"./interfaces/IWidgetApiErrorResponse\";\nexport type * from \"./interfaces/IWidgetApiRequest\";\nexport type * from \"./interfaces/IWidgetApiResponse\";\nexport * from \"./interfaces/WidgetApiAction\";\nexport * from \"./interfaces/WidgetApiDirection\";\nexport * from \"./interfaces/ApiVersion\";\nexport * from \"./interfaces/Capabilities\";\nexport type * from \"./interfaces/CapabilitiesAction\";\nexport type * from \"./interfaces/ContentLoadedAction\";\nexport type * from \"./interfaces/ScreenshotAction\";\nexport type * from \"./interfaces/StickerAction\";\nexport type * from \"./interfaces/StickyAction\";\nexport type * from \"./interfaces/SupportedVersionsAction\";\nexport type * from \"./interfaces/VisibilityAction\";\nexport * from \"./interfaces/GetOpenIDAction\";\nexport type * from \"./interfaces/OpenIDCredentialsAction\";\nexport * from \"./interfaces/WidgetKind\";\nexport * from \"./interfaces/ModalButtonKind\";\nexport * from \"./interfaces/ModalWidgetActions\";\nexport type * from \"./interfaces/SetModalButtonEnabledAction\";\nexport type * from \"./interfaces/WidgetConfigAction\";\nexport type * from \"./interfaces/SendEventAction\";\nexport type * from \"./interfaces/SendToDeviceAction\";\nexport type * from \"./interfaces/ReadEventAction\";\nexport type * from \"./interfaces/IRoomEvent\";\nexport type * from \"./interfaces/IRoomAccountData\";\nexport type * from \"./interfaces/NavigateAction\";\nexport type * from \"./interfaces/TurnServerActions\";\nexport type * from \"./interfaces/ReadRelationsAction\";\nexport type * from \"./interfaces/GetMediaConfigAction\";\nexport * from \"./interfaces/UpdateDelayedEventAction\";\nexport type * from \"./interfaces/UpdateStateAction\";\nexport type * from \"./interfaces/UploadFileAction\";\nexport type * from \"./interfaces/DownloadFileAction\";\nexport type * from \"./interfaces/ThemeChangeAction\";\nexport type * from \"./interfaces/LanguageChangeAction\";\n\n// Complex models\nexport * from \"./models/WidgetEventCapability\";\nexport * from \"./models/validation/url\";\nexport * from \"./models/validation/utils\";\nexport * from \"./models/Widget\";\nexport * from \"./models/WidgetParser\";\n\n// Utilities\nexport * from \"./templating/url-template\";\nexport * from \"./util/SimpleObservable\";\n\n// Drivers\nexport * from \"./driver/WidgetDriver\";\n", "// TODO: global mxwidgets\nimport * as mxwidgets from 'matrix-widget-api'\n\n\nconsole.log('mxwidgets:', mxwidgets)\n/**\n * The Bldrs widget.\n */\nclass BldrsWidget {\n  creatorUserId = 'ai.bldrs-share'\n  id = 'bldrs-share'\n  type = 'm.custom'\n  url = null\n  waitForIframeLoad = false\n}\n\n\n/**\n * The Bldrs Widget Driver.\n */\nclass BldrsWidgetDriver {\n  /** */\n  askOpenID(observer) {\n    // not implemented yet\n  }\n\n  /** @return {undefined} */\n  getTurnServers() {\n    return undefined\n  }\n\n  /** @return {Promise} */\n  navigate(uri) {\n    return Promise.resolve(undefined)\n  }\n\n  // NOSONAR\n  /**\n   * @return {Promise}\n   */\n  readEventRelations(\n      eventId,\n      roomId,\n      relationType,\n      eventType,\n      from,\n      to,\n      limit,\n      direction,\n  ) {\n    return Promise.resolve(undefined)\n  }\n\n  /** @return {Promise} */\n  readRoomEvents(eventType, msgtype, limit, roomIds) {\n    return Promise.resolve([])\n  }\n\n  /** @return {Promise} */\n  readStateEvents(eventType, stateKey, limit, roomIds) {\n    return Promise.resolve([])\n  }\n\n  /** @return {Promise} */\n  sendEvent(eventType, content, stateKey, roomId) {\n    return Promise.resolve(undefined)\n  }\n\n  /** @return {Promise} */\n  sendToDevice(eventType, encrypted, contentMap) {\n    return Promise.resolve(undefined)\n  }\n\n  /** @return {Promise} */\n  validateCapabilities(requested) {\n    return Promise.resolve(requested)\n  }\n}\n\n\n/**\n * Message types.\n */\nconst EVENT_CLIENT_SELECTIONCHANGED_ELEMENTS = 'ai.bldrs-share.SelectionChanged'\nconst EVENT_CLIENT_MODEL_LOADED = 'ai.bldrs-share.ModelLoaded'\nconst EVENT_CLIENT_HIDDEN_ELEMENTS = 'ai.bldrs-share.HiddenElements'\n\ndocument.addEventListener('DOMContentLoaded', (domEvent) => {\n  const container = document.getElementById('bldrs-widget-iframe')\n  const bldrsWidget = new BldrsWidget()\n  bldrsWidget.url = `${location.protocol}//${location.host}`\n  const widget = new mxwidgets.Widget(bldrsWidget)\n  const driver = new BldrsWidgetDriver()\n  const api = new mxwidgets.ClientWidgetApi(widget, container, driver)\n\n  const cbxIsReady = document.getElementById('cbxIsReady')\n  const txtLastMsg = document.getElementById('txtLastMsg')\n  const txtSendMessageType = document.getElementById('txtSendMessageType')\n  const txtSendMessagePayload = document.getElementById('txtSendMessagePayload')\n  const btnSendMessage = document.getElementById('btnSendMessage')\n\n  const txtMessagesCount = document.getElementById('messagesCount')\n  const txtLastMessageReceivedAction = document.getElementById('lastMessageReceivedAction')\n\n  container.src = bldrsWidget.url\n\n  api.on('ready', () => {\n    cbxIsReady.checked = true\n  })\n\n  // api.on('action:' + EVENT_CLIENT_SELECT_ELEMENTS, (event) => {\n  //   event.preventDefault()\n  //   txtLastMsg.value = JSON.stringify(event.detail)\n  //   api.transport.reply(event.detail, {})\n  // })\n\n  // api.on('action:' + EVENT_CLIENT_DESELECT_ELEMENTS, (event) => {\n  //   event.preventDefault()\n  //   txtLastMsg.value = JSON.stringify(event.detail)\n  //   api.transport.reply(event.detail, {})\n  // })\n\n  // api.on('action:' + EVENT_CLIENT_SELECTIONCHANGED_ELEMENTS, (event) => {\n  //   event.preventDefault()\n  //   txtLastMsg.value = JSON.stringify(event.detail)\n  //   api.transport.reply(event.detail, {})\n  // })\n\n  listenToApiAction(\n    EVENT_CLIENT_SELECTIONCHANGED_ELEMENTS,\n    (ev) => {\n      console.log('bldrs-inside-iframe#listenToApiAction, EVENT_CLIENT_SELECTIONCHANGED_ELEMENTS:', ev)\n      txtLastMsg.value = JSON.stringify(ev.detail ?? '')\n    },\n  )\n\n  listenToApiAction(\n    EVENT_CLIENT_MODEL_LOADED,\n    (ev) => {\n      console.log('bldrs-inside-iframe#listenToApiAction, EVENT_CLIENT_MODEL_LOADED:', ev)\n      txtLastMsg.value = JSON.stringify(ev.detail ?? '')\n    },\n  )\n\n  listenToApiAction(\n    EVENT_CLIENT_HIDDEN_ELEMENTS,\n    (ev) => {\n      console.log('bldrs-inside-iframe#listenToApiAction, EVENT_CLIENT_HIDDEN_ELEMENTS:', ev)\n      txtLastMsg.value = JSON.stringify(ev.detail ?? '')\n    },\n  )\n\n  btnSendMessage.addEventListener('click', () => {\n    const messageType = txtSendMessageType.value\n    const messagePayload = JSON.parse(txtSendMessagePayload.value)\n    api.transport.send(messageType, messagePayload)\n  })\n\n  let messagesReceivedCount = 0\n\n  /** */\n  function listenToApiAction(actionName, callback) {\n    api.on(`action:${actionName}`, (e) => {\n      console.log('bldrs-inside-iframe#listenToApiAction, event:', e)\n      if (e.type === 'DOMContentLoaded') {\n        console.log('bldrs-inside-iframe#listenToApiAction, ignoring event of type DOMContentLoaded')\n        return\n      }\n      e.preventDefault()\n      messagesReceivedCount++\n      if (callback) {\n        callback(e)\n      }\n      api.transport.reply(e.detail, {})\n      txtMessagesCount.innerText = messagesReceivedCount\n      txtLastMessageReceivedAction.innerText = e.detail.action\n    })\n  }\n})\n"],
  "mappings": "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",
  "names": ["ReflectApply", "ReflectOwnKeys", "NumberIsNaN", "once", "WidgetApiDirection", "exports", "invertedDirection", "dir", "ToWidget", "FromWidget", "Error", "MatrixApiVersion", "exports", "UnstableApiVersion", "CurrentApiVersions", "Prerelease1", "Prerelease2", "MSC2762", "MSC2762_UPDATE_STATE", "MSC2871", "MSC2873", "MSC2931", "MSC2974", "MSC2876", "MSC3819", "MSC3846", "MSC3869", "MSC3973", "MSC4039", "_events", "require", "_", "_excluded", "_typeof", "obj", "Symbol", "iterator", "constructor", "prototype", "_objectWithoutProperties", "source", "excluded", "target", "_objectWithoutPropertiesLoose", "key", "i", "Object", "getOwnPropertySymbols", "sourceSymbolKeys", "length", "indexOf", "propertyIsEnumerable", "call", "sourceKeys", "keys", "ownKeys", "object", "enumerableOnly", "symbols", "filter", "sym", "getOwnPropertyDescriptor", "enumerable", "push", "apply", "_objectSpread", "arguments", "forEach", "_defineProperty", "getOwnPropertyDescriptors", "defineProperties", "defineProperty", "_classCallCheck", "instance", "Constructor", "TypeError", "_defineProperties", "props", "descriptor", "configurable", "writable", "_toPropertyKey", "_createClass", "protoProps", "staticProps", "_inherits", "subClass", "superClass", "create", "value", "_setPrototypeOf", "o", "p", "setPrototypeOf", "bind", "__proto__", "_createSuper", "Derived", "hasNativeReflectConstruct", "_isNativeReflectConstruct", "_createSuperInternal", "Super", "_getPrototypeOf", "result", "NewTarget", "Reflect", "construct", "_possibleConstructorReturn", "self", "_assertThisInitialized", "ReferenceError", "sham", "Proxy", "Boolean", "valueOf", "e", "getPrototypeOf", "arg", "_toPrimitive", "String", "input", "hint", "prim", "toPrimitive", "undefined", "res", "Number", "PostmessageTransport", "_EventEmitter", "_super", "sendDirection", "initialWidgetId", "transportWindow", "inboundWindow", "_this", "Map", "AbortController", "_widgetId", "get", "_ready", "idBase", "concat", "Date", "now", "index", "id", "outboundRequests", "has", "set", "sendInternal", "message", "console", "log", "targetOrigin", "postMessage", "reply", "request", "responseData", "response", "send", "action", "data", "sendComplete", "then", "r", "_this2", "ready", "widgetId", "Promise", "reject", "Error", "api", "requestId", "nextRequestId", "WidgetApiToWidgetAction", "UpdateVisibility", "prResolve", "prReject", "resolve", "cleanUp", "err", "timerId", "setTimeout", "timeoutSeconds", "onStop", "stopController", "signal", "addEventListener", "clearTimeout", "removeEventListener", "start", "_this3", "ev", "handleMessage", "stop", "abort", "aborted", "strictOriginCheck", "origin", "window", "invertedDirection", "handleRequest", "handleResponse", "emit", "CustomEvent", "detail", "req", "isErrorResponse", "_response$response$er", "error", "WidgetApiResponseError", "EventEmitter", "exports", "WidgetApiToWidgetAction", "exports", "WidgetApiFromWidgetAction", "OpenIDRequestState", "exports", "MatrixWidgetType", "exports", "BuiltInModalButtonID", "exports", "EventKind", "exports", "EventDirection", "WidgetEventCapability", "direction", "eventType", "kind", "keyStr", "raw", "_classCallCheck", "_createClass", "key", "value", "matchesAsStateEvent", "stateKey", "State", "matchesAsToDeviceEvent", "ToDevice", "matchesAsRoomEvent", "msgtype", "arguments", "length", "undefined", "Event", "matchesAsRoomAccountData", "RoomAccount", "forStateEvent", "replace", "concat", "str", "findEventCapabilities", "forToDeviceEvent", "forRoomEvent", "forRoomMessageEvent", "forRoomAccountData", "capabilities", "parsed", "_iterator", "_createForOfIteratorHelper", "_step", "s", "n", "done", "cap", "eventSegment", "startsWith", "Send", "substring", "Receive", "expectingKeyStr", "includes", "parts", "split", "idx", "findIndex", "p", "endsWith", "slice", "map", "join", "push", "err", "e", "f", "Symbols", "exports", "_events", "require", "_WidgetApiDirection", "_ApiVersion", "_PostmessageTransport", "_WidgetApiAction", "_GetOpenIDAction", "_WidgetType", "_ModalWidgetActions", "_WidgetEventCapability", "_Symbols", "_regeneratorRuntime", "exports", "Op", "Object", "prototype", "hasOwn", "hasOwnProperty", "defineProperty", "obj", "key", "desc", "value", "$Symbol", "Symbol", "iteratorSymbol", "iterator", "asyncIteratorSymbol", "asyncIterator", "toStringTagSymbol", "toStringTag", "define", "enumerable", "configurable", "writable", "err", "wrap", "innerFn", "outerFn", "self", "tryLocsList", "protoGenerator", "Generator", "generator", "create", "context", "Context", "makeInvokeMethod", "tryCatch", "fn", "arg", "type", "call", "ContinueSentinel", "GeneratorFunction", "GeneratorFunctionPrototype", "IteratorPrototype", "getProto", "getPrototypeOf", "NativeIteratorPrototype", "values", "Gp", "defineIteratorMethods", "forEach", "method", "_invoke", "AsyncIterator", "PromiseImpl", "invoke", "resolve", "reject", "record", "result", "_typeof", "__await", "then", "unwrapped", "error", "previousPromise", "callInvokeWithMethodAndArg", "state", "Error", "doneResult", "delegate", "delegateResult", "maybeInvokeDelegate", "sent", "_sent", "dispatchException", "abrupt", "done", "methodName", "undefined", "TypeError", "info", "resultName", "next", "nextLoc", "pushTryEntry", "locs", "entry", "tryLoc", "catchLoc", "finallyLoc", "afterLoc", "tryEntries", "push", "resetTryEntry", "completion", "reset", "iterable", "iteratorMethod", "isNaN", "length", "i", "displayName", "isGeneratorFunction", "genFun", "ctor", "constructor", "name", "mark", "setPrototypeOf", "__proto__", "awrap", "async", "Promise", "iter", "keys", "val", "object", "reverse", "pop", "skipTempReset", "prev", "charAt", "slice", "stop", "rootRecord", "rval", "exception", "handle", "loc", "caught", "hasCatch", "hasFinally", "finallyEntry", "complete", "finish", "_catch", "thrown", "delegateYield", "asyncGeneratorStep", "gen", "_next", "_throw", "_asyncToGenerator", "args", "arguments", "apply", "ownKeys", "enumerableOnly", "getOwnPropertySymbols", "symbols", "filter", "sym", "getOwnPropertyDescriptor", "_objectSpread", "target", "source", "_defineProperty", "getOwnPropertyDescriptors", "defineProperties", "_toPropertyKey", "_defineProperties", "props", "descriptor", "_createClass", "Constructor", "protoProps", "staticProps", "_toPrimitive", "String", "input", "hint", "prim", "toPrimitive", "res", "Number", "_classCallCheck", "instance", "_inherits", "subClass", "superClass", "_setPrototypeOf", "_createSuper", "Derived", "hasNativeReflectConstruct", "_isNativeReflectConstruct", "_createSuperInternal", "Super", "_getPrototypeOf", "NewTarget", "Reflect", "construct", "_possibleConstructorReturn", "_assertThisInitialized", "ReferenceError", "_wrapNativeSuper", "Class", "_cache", "Map", "_isNativeFunction", "has", "get", "set", "Wrapper", "_construct", "Parent", "bind", "a", "Function", "sham", "Proxy", "Boolean", "valueOf", "e", "toString", "indexOf", "o", "p", "_awaitAsyncGenerator", "_OverloadYield", "_wrapAsyncGenerator", "_AsyncGenerator", "front", "back", "resume", "overloaded", "v", "nextKey", "k", "settle", "request", "kind", "WidgetApiResponseError", "_Error", "_super", "message", "data", "_this2", "WidgetApi", "_EventEmitter", "_super2", "_this3", "widgetId", "clientOrigin", "window", "parent", "transport", "PostmessageTransport", "WidgetApiDirection", "FromWidget", "targetOrigin", "on", "handleMessage", "hasCapability", "capability", "Array", "isArray", "approvedCapabilities", "includes", "requestedCapabilities", "requestCapability", "capabilitiesFinished", "supportsMSC2974Renegotiate", "requestCapabilities", "capabilities", "_this4", "cap", "requestCapabilityForRoomTimeline", "roomId", "concat", "requestCapabilityToSendState", "eventType", "stateKey", "WidgetEventCapability", "forStateEvent", "EventDirection", "Send", "raw", "requestCapabilityToReceiveState", "Receive", "requestCapabilityToSendToDevice", "forToDeviceEvent", "requestCapabilityToReceiveToDevice", "requestCapabilityToSendEvent", "forRoomEvent", "requestCapabilityToReceiveEvent", "requestCapabilityToSendMessage", "msgtype", "forRoomMessageEvent", "requestCapabilityToReceiveMessage", "requestCapabilityToReceiveRoomAccountData", "forRoomAccountData", "requestOpenIDConnectToken", "_this5", "sendComplete", "WidgetApiFromWidgetAction", "GetOpenIDCredentials", "response", "rdata", "OpenIDRequestState", "Allowed", "Blocked", "PendingUserConfirmation", "handlerFn", "ev", "preventDefault", "detail", "original_request_id", "requestId", "reply", "off", "WidgetApiToWidgetAction", "OpenIDCredentials", "updateRequestedCapabilities", "send", "MSC2974RenegotiateCapabilities", "sendContentLoaded", "ContentLoaded", "sendSticker", "sticker", "SendSticker", "setAlwaysOnScreen", "UpdateAlwaysOnScreen", "success", "openModalWidget", "url", "buttons", "MatrixWidgetType", "Custom", "OpenModalWidget", "closeModalWidget", "CloseModalWidget", "sendRoomEvent", "content", "delay", "parentDelayId", "sendEvent", "sendStateEvent", "SendEvent", "state_key", "room_id", "parent_delay_id", "updateDelayedEvent", "delayId", "action", "MSC4157UpdateDelayedEvent", "delay_id", "sendToDevice", "encrypted", "contentMap", "SendToDevice", "messages", "readRoomAccountData", "roomIds", "Symbols", "AnyRoom", "room_ids", "BeeperReadRoomAccountData", "r", "events", "readRoomEvents", "limit", "since", "MSC2876ReadEvents", "_readEventRelations", "_callee", "eventId", "relationType", "from", "to", "direction", "versions", "_callee$", "_context", "getClientVersions", "UnstableApiVersion", "MSC3869", "event_id", "rel_type", "event_type", "MSC3869ReadRelations", "readEventRelations", "_x", "_x2", "_x3", "_x4", "_x5", "_x6", "_x7", "_x8", "readStateEvents", "setModalButtonEnabled", "buttonId", "isEnabled", "BuiltInModalButtonID", "Close", "SetModalButtonEnabled", "button", "enabled", "navigateTo", "uri", "startsWith", "MSC2931Navigate", "getTurnServers", "_this", "_callee3", "setTurnServer", "onUpdateTurnServers", "_callee3$", "_context3", "_ref", "_callee2", "_callee2$", "_context2", "_x9", "UpdateTurnServers", "turnServerWatchers", "WatchTurnServers", "t0", "UnwatchTurnServers", "_searchUserDirectory", "_callee4", "searchTerm", "_callee4$", "_context4", "MSC3973", "search_term", "MSC3973UserDirectorySearch", "searchUserDirectory", "_x10", "_x11", "_getMediaConfig", "_callee5", "_callee5$", "_context5", "MSC4039", "MSC4039GetMediaConfigAction", "getMediaConfig", "_uploadFile", "_callee6", "file", "_callee6$", "_context6", "MSC4039UploadFileAction", "uploadFile", "_x12", "_downloadFile", "_callee7", "contentUri", "_callee7$", "_context7", "content_uri", "MSC4039DownloadFileAction", "downloadFile", "_x13", "start", "_this6", "MSC2974", "actionEv", "CustomEvent", "cancelable", "emit", "defaultPrevented", "SupportedApiVersions", "replyVersions", "Capabilities", "handleCapabilities", "UpdateVisibility", "NotifyCapabilities", "supported_versions", "CurrentApiVersions", "_this7", "cachedClientVersions", "console", "warn", "_this8", "MSC2871", "once", "approved", "EventEmitter", "MatrixCapabilities", "exports", "StickerpickerCapabilities", "StickerSending", "VideoConferenceCapabilities", "AlwaysOnScreen", "isTimelineCapability", "capability", "startsWith", "isTimelineCapabilityFor", "roomId", "concat", "getTimelineRoomIDFromCapability", "substring", "indexOf", "SimpleObservable", "initialFn", "_classCallCheck", "_defineProperty", "listeners", "push", "_createClass", "key", "value", "onUpdate", "fn", "update", "val", "_iterator", "_createForOfIteratorHelper", "_step", "s", "n", "done", "listener", "err", "e", "f", "close", "exports", "UpdateDelayedEventAction", "exports", "_events", "require", "_PostmessageTransport", "_WidgetApiDirection", "_WidgetApiAction", "_Capabilities", "_ApiVersion", "_WidgetEventCapability", "_GetOpenIDAction", "_SimpleObservable", "_Symbols", "_UpdateDelayedEventAction", "_typeof", "obj", "Symbol", "iterator", "constructor", "prototype", "ownKeys", "object", "enumerableOnly", "keys", "Object", "getOwnPropertySymbols", "symbols", "filter", "sym", "getOwnPropertyDescriptor", "enumerable", "push", "apply", "_objectSpread", "target", "i", "arguments", "length", "source", "forEach", "key", "_defineProperty", "getOwnPropertyDescriptors", "defineProperties", "defineProperty", "_createForOfIteratorHelper", "o", "allowArrayLike", "it", "Array", "isArray", "_unsupportedIterableToArray", "F", "s", "n", "done", "value", "e", "_e", "f", "TypeError", "normalCompletion", "didErr", "err", "call", "step", "next", "_e2", "_toConsumableArray", "arr", "_arrayWithoutHoles", "_iterableToArray", "_nonIterableSpread", "minLen", "_arrayLikeToArray", "toString", "slice", "name", "from", "test", "iter", "len", "arr2", "_regeneratorRuntime", "exports", "Op", "hasOwn", "hasOwnProperty", "desc", "$Symbol", "iteratorSymbol", "asyncIteratorSymbol", "asyncIterator", "toStringTagSymbol", "toStringTag", "define", "configurable", "writable", "wrap", "innerFn", "outerFn", "self", "tryLocsList", "protoGenerator", "Generator", "generator", "create", "context", "Context", "makeInvokeMethod", "tryCatch", "fn", "arg", "type", "ContinueSentinel", "GeneratorFunction", "GeneratorFunctionPrototype", "IteratorPrototype", "getProto", "getPrototypeOf", "NativeIteratorPrototype", "values", "Gp", "defineIteratorMethods", "method", "_invoke", "AsyncIterator", "PromiseImpl", "invoke", "resolve", "reject", "record", "result", "__await", "then", "unwrapped", "error", "previousPromise", "callInvokeWithMethodAndArg", "state", "Error", "doneResult", "delegate", "delegateResult", "maybeInvokeDelegate", "sent", "_sent", "dispatchException", "abrupt", "methodName", "undefined", "info", "resultName", "nextLoc", "pushTryEntry", "locs", "entry", "tryLoc", "catchLoc", "finallyLoc", "afterLoc", "tryEntries", "resetTryEntry", "completion", "reset", "iterable", "iteratorMethod", "isNaN", "displayName", "isGeneratorFunction", "genFun", "ctor", "mark", "setPrototypeOf", "__proto__", "awrap", "async", "Promise", "val", "reverse", "pop", "skipTempReset", "prev", "charAt", "stop", "rootRecord", "rval", "exception", "handle", "loc", "caught", "hasCatch", "hasFinally", "finallyEntry", "complete", "finish", "_catch", "thrown", "delegateYield", "asyncGeneratorStep", "gen", "_next", "_throw", "_asyncToGenerator", "args", "_classCallCheck", "instance", "Constructor", "_defineProperties", "props", "descriptor", "_toPropertyKey", "_createClass", "protoProps", "staticProps", "_inherits", "subClass", "superClass", "_setPrototypeOf", "p", "bind", "_createSuper", "Derived", "hasNativeReflectConstruct", "_isNativeReflectConstruct", "_createSuperInternal", "Super", "_getPrototypeOf", "NewTarget", "Reflect", "construct", "_possibleConstructorReturn", "_assertThisInitialized", "ReferenceError", "sham", "Proxy", "Boolean", "valueOf", "_toPrimitive", "String", "input", "hint", "prim", "toPrimitive", "res", "Number", "_asyncIterator", "sync", "retry", "AsyncFromSyncIterator", "AsyncFromSyncIteratorContinuation", "r", "_return", "ret", "thr", "ClientWidgetApi", "_EventEmitter", "_super", "widget", "iframe", "driver", "_this", "Set", "Map", "contentWindow", "transport", "PostmessageTransport", "WidgetApiDirection", "ToWidget", "id", "window", "targetOrigin", "origin", "on", "handleMessage", "addEventListener", "onIframeLoad", "start", "hasCapability", "capability", "allowedCapabilities", "has", "canUseRoomTimeline", "roomId", "concat", "Symbols", "AnyRoom", "canSendRoomEvent", "eventType", "msgtype", "allowedEvents", "some", "matchesAsRoomEvent", "EventDirection", "Send", "canSendStateEvent", "stateKey", "matchesAsStateEvent", "canSendToDeviceEvent", "matchesAsToDeviceEvent", "canReceiveRoomEvent", "Receive", "canReceiveStateEvent", "canReceiveToDeviceEvent", "canReceiveRoomAccountData", "matchesAsRoomAccountData", "isStopped", "_getWidgetVersions", "_callee", "_callee$", "_context", "cachedWidgetVersions", "send", "WidgetApiToWidgetAction", "SupportedApiVersions", "supported_versions", "t0", "console", "warn", "getWidgetVersions", "beginCapabilities", "_this2", "emit", "requestedCaps", "Capabilities", "caps", "capabilities", "validateCapabilities", "allowedCaps", "allowCapabilities", "allowed", "requested", "_this$allowedEvents", "_this3", "log", "_iterator2", "_step2", "c", "add", "WidgetEventCapability", "findEventCapabilities", "NotifyCapabilities", "approved", "_iterator3", "_step3", "isTimelineCapability", "getTimelineRoomIDFromCapability", "_iterator4", "getKnownRooms", "_step4", "pushRoomState", "viewedRoomId", "ev", "waitForIframeLoad", "contentLoadedWaitTimer", "setTimeout", "contentLoadedActionSent", "handleContentLoadedAction", "action", "clearTimeout", "reply", "message", "replyVersions", "request", "CurrentApiVersions", "_supportsUpdateState", "_callee2", "_callee2$", "_context2", "includes", "UnstableApiVersion", "MSC2762_UPDATE_STATE", "supportsUpdateState", "handleCapabilitiesRenegotiate", "_request$data", "_this4", "data", "newlyRequested", "size", "handleNavigate", "_request$data2", "_request$data3", "_this5", "MatrixCapabilities", "MSC2931Navigate", "uri", "startsWith", "onErr", "handleDriverError", "navigate", "handleOIDC", "_this6", "phase", "replyState", "credential", "OpenIDCredentials", "original_request_id", "requestId", "replyError", "msg", "OpenIDRequestState", "Blocked", "observer", "SimpleObservable", "update", "PendingUserConfirmation", "close", "Allowed", "token", "askOpenID", "handleReadRoomAccountData", "_this7", "events", "readRoomAccountData", "evs", "_handleReadEvents", "_callee3", "_this8", "askRoomIds", "_iterator5", "_step5", "limit", "since", "_stateKey", "_callee3$", "_context3", "room_ids", "state_key", "readRoomEvents", "readStateEvents", "all", "map", "readRoomTimeline", "flat", "t1", "readRoomState", "handleReadEvents", "_x", "handleSendEvent", "_this9", "room_id", "isDelayedEvent", "delay", "parent_delay_id", "MSC4157SendDelayedEvent", "sendEventPromise", "sendEvent", "content", "_request$data$delay", "_request$data$parent_", "sendDelayedEvent", "_request$data$delay2", "_request$data$parent_2", "sentEvent", "event_id", "eventId", "delay_id", "delayId", "handleUpdateDelayedEvent", "_this10", "MSC4157UpdateDelayedEvent", "UpdateDelayedEventAction", "Cancel", "Restart", "updateDelayedEvent", "_handleSendToDevice", "_callee4", "_callee4$", "_context4", "messages", "encrypted", "sendToDevice", "handleSendToDevice", "_x2", "_pollTurnServers", "_callee5", "turnServers", "initialServer", "_iteratorAbruptCompletion", "_didIteratorError", "_iteratorError", "_iterator", "_step", "server", "_callee5$", "_context5", "UpdateTurnServers", "pollTurnServers", "_x3", "_x4", "_handleWatchTurnServers", "_callee6", "_yield$turnServers$ne", "_callee6$", "_context6", "MSC3846TurnServers", "getTurnServers", "handleWatchTurnServers", "_x5", "_handleUnwatchTurnServers", "_callee7", "_callee7$", "_context7", "handleUnwatchTurnServers", "_x6", "_handleReadRelations", "_callee8", "_this11", "chunk", "_callee8$", "_context8", "readEventRelations", "rel_type", "event_type", "to", "direction", "prev_batch", "prevBatch", "next_batch", "nextBatch", "handleReadRelations", "_x7", "_handleUserDirectorySearch", "_callee9", "_callee9$", "_context9", "MSC3973UserDirectorySearch", "search_term", "searchUserDirectory", "limited", "results", "user_id", "userId", "display_name", "avatar_url", "avatarUrl", "handleUserDirectorySearch", "_x8", "_handleGetMediaConfig", "_callee10", "_callee10$", "_context10", "MSC4039UploadFile", "getMediaConfig", "handleGetMediaConfig", "_x9", "_handleUploadFile", "_callee11", "_callee11$", "_context11", "uploadFile", "file", "content_uri", "contentUri", "handleUploadFile", "_x10", "_handleDownloadFile", "_callee12", "_callee12$", "_context12", "MSC4039DownloadFile", "downloadFile", "handleDownloadFile", "_x11", "processError", "actionEv", "CustomEvent", "detail", "cancelable", "defaultPrevented", "WidgetApiFromWidgetAction", "ContentLoaded", "SendEvent", "SendToDevice", "GetOpenIDCredentials", "MSC2974RenegotiateCapabilities", "MSC2876ReadEvents", "WatchTurnServers", "UnwatchTurnServers", "MSC3869ReadRelations", "BeeperReadRoomAccountData", "MSC4039GetMediaConfigAction", "MSC4039UploadFileAction", "MSC4039DownloadFileAction", "updateTheme", "theme", "ThemeChange", "updateLanguage", "lang", "LanguageChange", "takeScreenshot", "TakeScreenshot", "updateVisibility", "isVisible", "UpdateVisibility", "visible", "sendWidgetConfig", "WidgetConfig", "notifyModalWidgetButtonClicked", "ButtonClicked", "notifyModalWidgetClose", "CloseModalWidget", "_feedEvent", "_callee13", "rawEvent", "currentViewedRoomId", "_rawEvent$content", "_callee13$", "_context13", "setViewedRoomId", "feedEvent", "_x12", "_x13", "_feedToDevice", "_callee14", "_callee14$", "_context14", "feedToDevice", "_x14", "_x15", "_flushRoomState", "_callee15", "_iterator6", "_step6", "eventTypeMap", "_iterator7", "_step7", "stateKeyMap", "_callee15$", "_context15", "pushRoomStateTasks", "pushRoomStateResult", "UpdateState", "flushRoomStateTask", "flushRoomState", "_this12", "_iterator8", "_step8", "_loop", "cap", "kind", "EventKind", "State", "_cap$keyStr", "_this12$flushRoomStat", "keyStr", "task", "_iterator9", "_step9", "event", "get", "set", "_feedStateUpdate", "_callee16", "_callee16$", "_context16", "feedStateUpdate", "_x16", "EventEmitter", "isErrorResponse", "responseData", "error", "_typeof", "message", "WidgetKind", "exports", "ModalButtonKind", "exports", "isValidUrl", "val", "parsed", "URL", "protocol", "e", "TypeError", "assertPresent", "obj", "key", "Error", "concat", "String", "_utils", "require", "_", "_typeof", "obj", "Symbol", "iterator", "constructor", "prototype", "_classCallCheck", "instance", "Constructor", "TypeError", "_defineProperties", "target", "props", "i", "length", "descriptor", "enumerable", "configurable", "writable", "Object", "defineProperty", "_toPropertyKey", "key", "_createClass", "protoProps", "staticProps", "arg", "_toPrimitive", "String", "input", "hint", "prim", "toPrimitive", "undefined", "res", "call", "Number", "Widget", "definition", "Error", "assertPresent", "get", "creatorUserId", "type", "id", "name", "rawData", "title", "url", "URL", "templateUrl", "origin", "waitForIframeLoad", "data", "value", "getCompleteUrl", "params", "runTemplate", "exports", "_Widget", "require", "_url", "_typeof", "obj", "Symbol", "iterator", "constructor", "prototype", "_createForOfIteratorHelper", "o", "allowArrayLike", "it", "Array", "isArray", "_unsupportedIterableToArray", "length", "i", "F", "s", "n", "done", "value", "e", "_e", "f", "TypeError", "normalCompletion", "didErr", "err", "call", "step", "next", "_e2", "minLen", "_arrayLikeToArray", "Object", "toString", "slice", "name", "from", "test", "arr", "len", "arr2", "_classCallCheck", "instance", "Constructor", "_defineProperties", "target", "props", "descriptor", "enumerable", "configurable", "writable", "defineProperty", "_toPropertyKey", "key", "_createClass", "protoProps", "staticProps", "arg", "_toPrimitive", "String", "input", "hint", "prim", "toPrimitive", "undefined", "res", "Number", "WidgetParser", "parseAccountData", "content", "result", "_i", "_Object$keys", "keys", "widgetId", "roughWidget", "type", "sender", "probableWidgetId", "state_key", "id", "asStateEvent", "event_id", "room_id", "origin_server_ts", "widget", "parseRoomWidget", "push", "parseWidgetsFromRoomState", "currentState", "_iterator", "_step", "state", "stateEvent", "estimatedWidget", "creatorUserId", "url", "waitForIframeLoad", "data", "processEstimatedWidget", "isValidUrl", "Widget", "exports", "runTemplate", "url", "widget", "params", "variables", "Object", "assign", "data", "widgetRoomId", "currentUserId", "userDisplayName", "userHttpAvatarUrl", "id", "clientId", "clientTheme", "clientLanguage", "deviceId", "baseUrl", "result", "_i", "_Object$keys", "keys", "length", "key", "pattern", "concat", "replace", "rexp", "RegExp", "encodeURIComponent", "toString", "a", "undefined", "String", "_", "require", "_typeof", "obj", "Symbol", "iterator", "constructor", "prototype", "_classCallCheck", "instance", "Constructor", "TypeError", "_defineProperties", "target", "props", "i", "length", "descriptor", "enumerable", "configurable", "writable", "Object", "defineProperty", "_toPropertyKey", "key", "_createClass", "protoProps", "staticProps", "arg", "_toPrimitive", "String", "input", "hint", "prim", "toPrimitive", "undefined", "res", "call", "Number", "WidgetDriver", "value", "validateCapabilities", "requested", "Promise", "resolve", "Set", "sendEvent", "eventType", "content", "stateKey", "arguments", "roomId", "reject", "Error", "sendDelayedEvent", "delay", "parentDelayId", "updateDelayedEvent", "delayId", "action", "sendToDevice", "encrypted", "contentMap", "readRoomAccountData", "roomIds", "readRoomEvents", "msgtype", "limit", "since", "readStateEvents", "readRoomTimeline", "readRoomState", "MAX_SAFE_INTEGER", "readEventRelations", "eventId", "relationType", "from", "to", "direction", "chunk", "askOpenID", "observer", "update", "state", "OpenIDRequestState", "Blocked", "navigate", "uri", "getTurnServers", "searchUserDirectory", "searchTerm", "limited", "results", "getMediaConfig", "uploadFile", "file", "downloadFile", "contentUri", "getKnownRooms", "processError", "error", "exports", "_WidgetApi", "require", "Object", "keys", "forEach", "key", "exports", "defineProperty", "enumerable", "get", "_ClientWidgetApi", "_Symbols", "_PostmessageTransport", "_WidgetType", "_IWidgetApiErrorResponse", "_WidgetApiAction", "_WidgetApiDirection", "_ApiVersion", "_Capabilities", "_GetOpenIDAction", "_WidgetKind", "_ModalButtonKind", "_ModalWidgetActions", "_UpdateDelayedEventAction", "_WidgetEventCapability", "_url", "_utils", "_Widget", "_WidgetParser", "_urlTemplate", "_SimpleObservable", "_WidgetDriver"]
}
